var relearn_searchindex = [
  {
    "breadcrumb": "Zoop SmartPOS Plugin \u003e Releases",
    "content": "Pacote Basta modificar a versão no gradle, conforme exemplo:\nimplementation(\"br.zoop.pos.plugin:smartpos-gertec-gpos720:1.8.4\") // Para a Gertec GPOS720 implementation(\"br.zoop.pos.plugin:smartpos-pax-a910:1.8.4\") // Para a Pax A910 Aviso Será necessário adicionar novas permissões no AndroidManifest.xml do aplicativo.\n\u003cuses-permission android:name=\"android.permission.READ_PHONE_STATE\" /\u003e \u003cuses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" /\u003e Release Notes Correção do fluxo de confirmação de transações Adiciona o envio de logs de erro e métricas caso seja habilitado pela aplicação na inicialização Valida versão mínima de FW para dispositivos Gertec Adiciona uma callback no pagamento, responsável por capturar inputs da aplicação",
    "description": "Pacote Basta modificar a versão no gradle, conforme exemplo:\nimplementation(\"br.zoop.pos.plugin:smartpos-gertec-gpos720:1.8.4\") // Para a Gertec GPOS720 implementation(\"br.zoop.pos.plugin:smartpos-pax-a910:1.8.4\") // Para a Pax A910 Aviso Será necessário adicionar novas permissões no AndroidManifest.xml do aplicativo.\n\u003cuses-permission android:name=\"android.permission.READ_PHONE_STATE\" /\u003e \u003cuses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" /\u003e Release Notes Correção do fluxo de confirmação de transações Adiciona o envio de logs de erro e métricas caso seja habilitado pela aplicação na inicialização Valida versão mínima de FW para dispositivos Gertec Adiciona uma callback no pagamento, responsável por capturar inputs da aplicação",
    "tags": [],
    "title": "1.8.4",
    "uri": "/releases/1.8.4.html"
  },
  {
    "breadcrumb": "Zoop SmartPOS Plugin \u003e Releases",
    "content": "Pacote Basta modificar a versão no gradle, conforme exemplo:\nimplementation(\"br.zoop.pos.plugin:smartpos-gertec-gpos720:1.8.3\") // Para a Gertec GPOS720 implementation(\"br.zoop.pos.plugin:smartpos-pax-a910:1.8.3\") // Para a Pax A910 Release Notes Correção do fallback de chip para tarja. Adicionado o relatório de transações falhadas e canceladas. Correção da função de retorno de número de série de dispositivos Gertec.",
    "description": "Pacote Basta modificar a versão no gradle, conforme exemplo:\nimplementation(\"br.zoop.pos.plugin:smartpos-gertec-gpos720:1.8.3\") // Para a Gertec GPOS720 implementation(\"br.zoop.pos.plugin:smartpos-pax-a910:1.8.3\") // Para a Pax A910 Release Notes Correção do fallback de chip para tarja. Adicionado o relatório de transações falhadas e canceladas. Correção da função de retorno de número de série de dispositivos Gertec.",
    "tags": [],
    "title": "1.8.3",
    "uri": "/releases/1.8.3.html"
  },
  {
    "breadcrumb": "Zoop SmartPOS Plugin \u003e Releases",
    "content": "Nota Importante Devido a alterações internas, houve uma mudança no processo de inicialização do plugin, a partir desta versão a inicialização do plugin não será mais através da função Zoop.Make. Será feita através da nova função Zoop.constructorParameters()\nExemplo de inicialização do plugin em versões anteriores à esta: Zoop.findPlugin\u003cSmartPOSPlugin\u003e() ?: Zoop.make\u003cSmartPOSPlugin\u003e().run(Zoop::plug) Exemplo de inicialização do plugin a partir desta versão: Zoop.findPlugin\u003cSmartPOSPlugin\u003e() ?: Zoop.plug(SmartPOSPlugin(Zoop.constructorParameters())) Dependências Nesta nova versão, é necessário adcionar duas dependências a nível de aplicação.\nimplementation(\"org.jetbrains.kotlinx:kotlinx-datetime:\u003cversion\u003e\") implementation(\"org.jetbrains.kotlinx:kotlinx-serialization-json:\u003cversion\u003e\") Caso o dispositivo esteja usando uma versão abaixo do Android 8.0 (API level 26), deve ser adicionado a dependência core library desugaring. Deve-se também neste caso utilizar uma versão do Android Gradle Plugin acima da 4.0\nNas dependências do projeto à nível de aplicação, implemente:\ncoreLibraryDesugaring(\"com.android.tools:desugar_jdk_libs:1.1.5\") Em compileOptions, à nível de aplicação, habilite a biblioteca:\ncompileOptions { isCoreLibraryDesugaringEnabled = true } Pacote Basta modificar a versão no gradle, conforme exemplo:\nimplementation(\"br.zoop.pos.plugin:smartpos-gertec-gpos720:1.8.2\") // Para a Gertec GPOS720 implementation(\"br.zoop.pos.plugin:smartpos-pax-a910:1.8.2\") // Para a Pax A910/A910S Release Notes Adição de suporte ao dispositivo Pax A910S; Adição de suporte a pagamento por cartão com tarja magnética (mag stripe); Adição de suporte ao campo reference ID no pagamento por Pix; Adição de suporte a metadados no pagamento por Pix; Atualização do SDK dos dispositivos Pax; Correção de congelamento durante a inicialização para dispositivos Gertec; Correção da leitura de cartões com um PAN de 17 ou mais dígitos em dispositivos Gertec; Correção de comportamento ao capturar um CVV vazio; Correção de timers durante a captura de dados do operador/usuário; Correção da impressão da mensagem de aprovação do pagamento por cartão quando esta se dá por múltiplos fatores.",
    "description": "Nota Importante Devido a alterações internas, houve uma mudança no processo de inicialização do plugin, a partir desta versão a inicialização do plugin não será mais através da função Zoop.Make. Será feita através da nova função Zoop.constructorParameters()\nExemplo de inicialização do plugin em versões anteriores à esta: Zoop.findPlugin\u003cSmartPOSPlugin\u003e() ?: Zoop.make\u003cSmartPOSPlugin\u003e().run(Zoop::plug) Exemplo de inicialização do plugin a partir desta versão: Zoop.findPlugin\u003cSmartPOSPlugin\u003e() ?: Zoop.plug(SmartPOSPlugin(Zoop.constructorParameters())) Dependências Nesta nova versão, é necessário adcionar duas dependências a nível de aplicação.",
    "tags": [],
    "title": "1.8.2",
    "uri": "/releases/1.8.2.html"
  },
  {
    "breadcrumb": "Zoop SmartPOS Plugin \u003e Releases",
    "content": "Pacote Basta modificar a versão no gradle, conforme exemplo:\nimplementation(\"br.zoop.pos.plugin:smartpos-gertec-gpos720:1.7.2\") // Para a Gertec GPOS720 implementation(\"br.zoop.pos.plugin:smartpos-pax-a910:1.7.2\") // Para a Pax A910 Release Notes Aceitar um parâmetro do tipo JsonObject para o campo metadata do pagamento. Correção de congelamento do teclado de senha para a Gertec GPOS720.",
    "description": "Pacote Basta modificar a versão no gradle, conforme exemplo:\nimplementation(\"br.zoop.pos.plugin:smartpos-gertec-gpos720:1.7.2\") // Para a Gertec GPOS720 implementation(\"br.zoop.pos.plugin:smartpos-pax-a910:1.7.2\") // Para a Pax A910 Release Notes Aceitar um parâmetro do tipo JsonObject para o campo metadata do pagamento. Correção de congelamento do teclado de senha para a Gertec GPOS720.",
    "tags": [],
    "title": "1.7.2",
    "uri": "/releases/1.7.2.html"
  },
  {
    "breadcrumb": "Zoop SmartPOS Plugin \u003e Releases",
    "content": "Pacote Basta incluir o plugin para o modelo, com a respectiva versão, no gradle, conforme exemplo:\nimplementation(\"br.zoop.pos.plugin:smartpos-gertec-gpos720:1.7.1-rc-1\") // Para a Gertec GPOS720 implementation(\"br.zoop.pos.plugin:smartpos-pax-a910:1.7.1-rc-1\") // Para a Pax A910 Release Notes Adicionado suporte a Gertec GPOS720 Adicionado suporte a metadados Obtenção do ID da transação para pagamentos por Pix Inclusão do número de parcelas para crédito parcelado no relatório detalhado Impressão do endereço na via do cliente",
    "description": "Pacote Basta incluir o plugin para o modelo, com a respectiva versão, no gradle, conforme exemplo:\nimplementation(\"br.zoop.pos.plugin:smartpos-gertec-gpos720:1.7.1-rc-1\") // Para a Gertec GPOS720 implementation(\"br.zoop.pos.plugin:smartpos-pax-a910:1.7.1-rc-1\") // Para a Pax A910 Release Notes Adicionado suporte a Gertec GPOS720 Adicionado suporte a metadados Obtenção do ID da transação para pagamentos por Pix Inclusão do número de parcelas para crédito parcelado no relatório detalhado Impressão do endereço na via do cliente",
    "tags": [],
    "title": "1.7.1",
    "uri": "/releases/1.7.1.html"
  },
  {
    "breadcrumb": "Zoop SmartPOS Plugin \u003e Releases",
    "content": "Pacote Basta modificar a versão no gradle, conforme exemplo:\nimplementation(\"br.zoop.pos.plugin:smartpos:1.6.4-rc-1\") Release Notes Correção no filtro de relatórios por data (ontem, anteontem) para casos de relatórios consolidado e detalhado.",
    "description": "Pacote Basta modificar a versão no gradle, conforme exemplo:\nimplementation(\"br.zoop.pos.plugin:smartpos:1.6.4-rc-1\") Release Notes Correção no filtro de relatórios por data (ontem, anteontem) para casos de relatórios consolidado e detalhado.",
    "tags": [],
    "title": "1.6.4",
    "uri": "/releases/1.6.4.html"
  },
  {
    "breadcrumb": "Zoop SmartPOS Plugin \u003e Primeiros passos \u003e Deploy",
    "content": "POS de desenvolvimento/debug Dica Você pode testar o deploy usando o código do aplicativo de exemplo disponibilizado.\nPara realizar um deploy na máquina para teste, é possível utilizar o quickRun do Android Studio, conforme abaixo: Também é possível instalar via adb, após o build, navegar até a pasta em que o app se encontra e utilizar o comando: adb install -t nome_do_app.apk\nCaso já tenha uma versão anterior instalada, é possível instalar com o comando: adb install -t -r nome_do_app.apk\nPOS de produção Caso seja necessário gerar uma release, é preciso configurar a assinatura de aplicativo disponibilizada pelo fabricante.\nBuild da aplicação Para buildar o pacote, basta navegar pelo Android Studio até as tasks do gradle, e selecionar a opção assemble. Instalar aplicação numa máquina de produção Para deploy em máquina de produção é necessário o uso de ferramenta específica. Para acesso à ferramenta, é necessário entrar em contato com a Gertec.",
    "description": "POS de desenvolvimento/debug Dica Você pode testar o deploy usando o código do aplicativo de exemplo disponibilizado.\nPara realizar um deploy na máquina para teste, é possível utilizar o quickRun do Android Studio, conforme abaixo: Também é possível instalar via adb, após o build, navegar até a pasta em que o app se encontra e utilizar o comando: adb install -t nome_do_app.apk",
    "tags": [],
    "title": "Gertec",
    "uri": "/first_steps/deploy/gertec.html"
  },
  {
    "breadcrumb": "Zoop SmartPOS Plugin \u003e Onboarding",
    "content": "Capítulo 1 Onboarding Gertec Acesso ao portal do desenvolvedor Gertec O parceiro Zoop deve iniciar o processo acessando o Portal do Desenvolvedor Gertec para criar uma conta ou realizar login, caso já tenha cadastro. Você pode também entrar em contato com os canais de suporte da Gertec, via e-mail em suporte@gertec.com.br ou WhatsApp pelo número (11) 2173-6500 (Tecla 2), identificando-se como parceiro Zoop. Compra de máquinas de debug Após finalizar o seu cadastro, o parceiro Zoop solicita a compra de máquinas de debug para o desenvolvimento, incluindo a chave Zoop, através do Portal do Desenvolvedor Gertec ou acessando a loja virtual Gertec. Acesso à documentação e download do APK SDK Zoop Durante o processo, o parceiro Zoop tem acesso liberado à documentação e pode realizar o download do APK SDK Zoop. Para realizar testes específicos, entretanto, são necessárias credenciais de acesso, obtidas na etapa de onboarding da Zoop. Caso ainda não tenha iniciado o onboarding, o parceiro pode preencher o formulário para clientes Zoop aqui e para não clientes aqui. Assinatura do APK de DEV Para assinatura do APK de desenvolvimento acesse este artigo. Assinatura da aplicação produção Ao finalizar o desenvolvimento, o parceiro Zoop deve obter a assinatura da Gertec com a chave Zoop. Esse processo pode ser realizado pela central de chamados da Gertec, pelo Mobile Device Management Gertec (MDM Gertec), caso o serviço esteja contratado, ou pelo Robô de Assinatura da Gertec. Central de chamados Gertec; MDM Gertec; Robô de Assinatura Gertec. Compra de máquinas de produção O parceiro Zoop pode adquirir máquinas de produção na loja virtual Gertec ou entrando em contato via e-mail em zoop@gertec.com.br. As máquinas são recebidas com o software da Zoop, e será necessário substituí-lo pelo app desenvolvido em cada máquina. Inclusão do app desenvolvido e testado nas máquinas de produção Para incluir o app de produção já desenvolvido, testado e assinado, primeiro será necessária a exclusão do app nativo Zoop para posterior inclusão do novo app. Para exclusão do app nativo Zoop, siga as instruções neste artigo. O download do novo app poderá ser feito unitariamente através de “pen-drive” (cabo OTG), ou através de MDM Gertec caso tenha o serviço contratado. Distribuição dos aplicativos O parceiro Zoop é responsável pela distribuição dos aplicativos nos terminais. Da mesma forma acima, as atualizações poderão ser feitas através de “pen-drive” (cabo OTG), ou remotamente através do MDM Gertec caso tenha o serviço contratado. Manutenção de versões para novos terminais Via MDM Gertec é possível embarcar e atualizar a versão remotamente em terminais com certificação e chaves Zoop. Caso seja de seu interesse conhecer o MDM Gertec, solicite uma apresentação pelo email zoop@gertec.com.br. Contato para projetos de compras de terminais O parceiro Zoop com projetos de compras de terminais Gertec pode entrar em contato via e-mail em zoop@gertec.com.br, para adquirir serviços que auxiliarão no processo de distribuição de seus aplicativos.",
    "description": "Capítulo 1 Onboarding Gertec Acesso ao portal do desenvolvedor Gertec O parceiro Zoop deve iniciar o processo acessando o Portal do Desenvolvedor Gertec para criar uma conta ou realizar login, caso já tenha cadastro. Você pode também entrar em contato com os canais de suporte da Gertec, via e-mail em suporte@gertec.com.br ou WhatsApp pelo número (11) 2173-6500 (Tecla 2), identificando-se como parceiro Zoop. Compra de máquinas de debug Após finalizar o seu cadastro, o parceiro Zoop solicita a compra de máquinas de debug para o desenvolvimento, incluindo a chave Zoop, através do Portal do Desenvolvedor Gertec ou acessando a loja virtual Gertec. Acesso à documentação e download do APK SDK Zoop Durante o processo, o parceiro Zoop tem acesso liberado à documentação e pode realizar o download do APK SDK Zoop. Para realizar testes específicos, entretanto, são necessárias credenciais de acesso, obtidas na etapa de onboarding da Zoop. Caso ainda não tenha iniciado o onboarding, o parceiro pode preencher o formulário para clientes Zoop aqui e para não clientes aqui. Assinatura do APK de DEV Para assinatura do APK de desenvolvimento acesse este artigo. Assinatura da aplicação produção Ao finalizar o desenvolvimento, o parceiro Zoop deve obter a assinatura da Gertec com a chave Zoop. Esse processo pode ser realizado pela central de chamados da Gertec, pelo Mobile Device Management Gertec (MDM Gertec), caso o serviço esteja contratado, ou pelo Robô de Assinatura da Gertec. Central de chamados Gertec; MDM Gertec; Robô de Assinatura Gertec. Compra de máquinas de produção O parceiro Zoop pode adquirir máquinas de produção na loja virtual Gertec ou entrando em contato via e-mail em zoop@gertec.com.br. As máquinas são recebidas com o software da Zoop, e será necessário substituí-lo pelo app desenvolvido em cada máquina. Inclusão do app desenvolvido e testado nas máquinas de produção Para incluir o app de produção já desenvolvido, testado e assinado, primeiro será necessária a exclusão do app nativo Zoop para posterior inclusão do novo app. Para exclusão do app nativo Zoop, siga as instruções neste artigo. O download do novo app poderá ser feito unitariamente através de “pen-drive” (cabo OTG), ou através de MDM Gertec caso tenha o serviço contratado. Distribuição dos aplicativos O parceiro Zoop é responsável pela distribuição dos aplicativos nos terminais. Da mesma forma acima, as atualizações poderão ser feitas através de “pen-drive” (cabo OTG), ou remotamente através do MDM Gertec caso tenha o serviço contratado. Manutenção de versões para novos terminais Via MDM Gertec é possível embarcar e atualizar a versão remotamente em terminais com certificação e chaves Zoop. Caso seja de seu interesse conhecer o MDM Gertec, solicite uma apresentação pelo email zoop@gertec.com.br. Contato para projetos de compras de terminais O parceiro Zoop com projetos de compras de terminais Gertec pode entrar em contato via e-mail em zoop@gertec.com.br, para adquirir serviços que auxiliarão no processo de distribuição de seus aplicativos.",
    "tags": [],
    "title": "Gertec",
    "uri": "/onboarding/gertec.html"
  },
  {
    "breadcrumb": "Zoop SmartPOS Plugin",
    "content": "Capítulo 1 Onboarding Resumo Aqui, você recebe as credenciais de acesso ao dashboard. Escolha o fabricante do seu terminal Tectoy/Pax Gertec",
    "description": "Capítulo 1 Onboarding Resumo Aqui, você recebe as credenciais de acesso ao dashboard. Escolha o fabricante do seu terminal Tectoy/Pax Gertec",
    "tags": [],
    "title": "Onboarding",
    "uri": "/onboarding.html"
  },
  {
    "breadcrumb": "Zoop SmartPOS Plugin \u003e Primeiros passos \u003e Deploy",
    "content": "POS de desenvolvimento/debug Dica Você pode testar o deploy usando o código do aplicativo de exemplo disponibilizado.\nPara realizar um deploy na máquina para teste, é possível utilizar o quickRun do Android Studio, conforme abaixo: Também é possível instalar via adb, após o build, navegar até a pasta em que o app se encontra e utilizar o comando: adb install -t nome_do_app.apk\nCaso já tenha uma versão anterior instalada, é possível instalar com o comando: adb install -t -r nome_do_app.apk\nPOS de produção Caso seja necessário gerar uma release, é preciso configurar a assinatura de aplicativo disponibilizada pelo fabricante (no caso do A910/A910S, consultar à Pax).\nAlém da assinatura da aplicação, é necessário enviar o pacote com assinatura anterior para mais uma etapa de assinatura na Pax (sem essa etapa, não é possível instalar a aplicação no smartPOS de produção).\nDica Só é possível instalar uma aplicação com nível de segurança igual à instalada no dispositivo, conforme tabela abaixo:\nVersão Anterior Nova versão Status Assinatura do android Assinada pela Pax Falha Assinada pela Pax Assinada pela Pax Sucesso Não assinada Não assinada Sucesso Caso seja necessário instalar versões de níveis de assinatura diferentes, é necessário desinstalar a versão anterior.\nBuild da aplicação Para buildar o pacote, basta navegar pelo Android Studio até as tasks do gradle, e selecionar a opção assemble. Instalar aplicação numa máquina de produção Observando os passos anteriores de assinatura de versão, para deploy em máquina de produção, não é possível instalar via adb, sendo necessário o uso de ferramenta específica. Para acesso à ferramenta, é necessário entrar em contato com a Tectoy.",
    "description": "POS de desenvolvimento/debug Dica Você pode testar o deploy usando o código do aplicativo de exemplo disponibilizado.\nPara realizar um deploy na máquina para teste, é possível utilizar o quickRun do Android Studio, conforme abaixo: Também é possível instalar via adb, após o build, navegar até a pasta em que o app se encontra e utilizar o comando: adb install -t nome_do_app.apk",
    "tags": [],
    "title": "Tectoy/Pax",
    "uri": "/first_steps/deploy/tectoy.html"
  },
  {
    "breadcrumb": "Zoop SmartPOS Plugin \u003e Onboarding",
    "content": "Capítulo 1 Onboarding Tectoy/Pax Processo de desenvolvimento Acione a TecToy sinalizando interesse para a Adriana Lima Madeira (adriana.madeira@tectoy.com | 11 94369-8661). Assine o NDA (Contrato de confidencialidade com Acordo de Não Divulgação) com a TecToy para compra de máquinas e início da demonstração do desenvolvimento da TecToy para o parceiro Zoop. Ele contém alguns detalhes como: quantidade de máquinas, prazo de entrega, cobertura para suporte a algum método durante o desenvolvimento, como, por exemplo a impressão. Paralelo a esse processo com a TecToy, o parceiro Zoop pode acessar livremente a documentação e realizar o Download do APK SDK Zoop, porém para realizar testes de algum fluxo, é necessário possuir as credenciais de acesso. Que o parceiro as adquire nesta etapa de Onboarding da Zoop. Ao final do seu desenvolvimento, envie para a TecToy sua aplicação homologada juntamente com o SDK Zoop, para que a TecToy embarque a solução nos seus terminais. Aviso Caso sua empresa desenvolva um novo App, deverá ser gerado um novo pacote e enviar a TecToy. E, caso a Zoop tenha um novo SDK, sua empresa deverá gerar um novo pacote. Ambas as atualizações em campo são de responsabilidade do parceiro.\nDica Qualquer dúvida, entre em contato conosco de segunda à sexta, entre 9h e 19h através dos telefones: 4003-3261 (capitais) / 0800 878 8161. Ou envie um e-mail para: suporte@zoop.com.br",
    "description": "Capítulo 1 Onboarding Tectoy/Pax Processo de desenvolvimento Acione a TecToy sinalizando interesse para a Adriana Lima Madeira (adriana.madeira@tectoy.com | 11 94369-8661). Assine o NDA (Contrato de confidencialidade com Acordo de Não Divulgação) com a TecToy para compra de máquinas e início da demonstração do desenvolvimento da TecToy para o parceiro Zoop. Ele contém alguns detalhes como: quantidade de máquinas, prazo de entrega, cobertura para suporte a algum método durante o desenvolvimento, como, por exemplo a impressão. Paralelo a esse processo com a TecToy, o parceiro Zoop pode acessar livremente a documentação e realizar o Download do APK SDK Zoop, porém para realizar testes de algum fluxo, é necessário possuir as credenciais de acesso. Que o parceiro as adquire nesta etapa de Onboarding da Zoop. Ao final do seu desenvolvimento, envie para a TecToy sua aplicação homologada juntamente com o SDK Zoop, para que a TecToy embarque a solução nos seus terminais. Aviso Caso sua empresa desenvolva um novo App, deverá ser gerado um novo pacote e enviar a TecToy. E, caso a Zoop tenha um novo SDK, sua empresa deverá gerar um novo pacote. Ambas as atualizações em campo são de responsabilidade do parceiro.",
    "tags": [],
    "title": "Tectoy/Pax",
    "uri": "/onboarding/tectoy.html"
  },
  {
    "breadcrumb": "Zoop SmartPOS Plugin \u003e Funcionalidades \u003e Relatórios",
    "content": "Relatório consolidado Request que recupera um relatório consolidado por tipo de pagamento e bandeira do cartão, em um intervalo de tempo pré definido. Dica Você pode imprimir a via passando o objeto retornado para o request de impressão\nParâmetros receiptType -\u003e Tipo de relatório, no caso do consolidado: ReceiptType.CONSOLIDATED_REPORT reportFilter -\u003e Filtro do relatório, utilizando a data class ReportFilter data class ReportFilter( val threshold: ReportThreshold? = null, val fromDate: DateParameters? = null, val fromTime: TimeParameters = TimeParameters(0, 0), val toDate: DateParameters? = null, val toTime: TimeParameters = TimeParameters(23, 59) ) enum class ReportThreshold { TODAY, YESTERDAY, DAY_BEFORE_YESTERDAY, CUSTOM } data class DateParameters( val day: Int, val month: Int, val year: Int ) data class TimeParameters( val hour: Int, val minute: Int ) Exemplo SmartPOSPlugin.createReportsRequestBuilder() .receiptType(ReceiptType.CONSOLIDATED_REPORT) .reportFilter(filter) .callback(object : Callback\u003cReportResponse\u003e() { override fun onFail(error: Throwable) { // Erro processando relatório } override fun onSuccess(response: ReportResponse) { /* Relatório consolidado: */ val data = response.reportData.consolidatedReportData } }).build().run(Zoop::post) Retorno data class ConsolidatedReportData( val issueDate: String?, // Data de emissão do relatório val sellerName: String?, // Nome do seller val documentType: String?, // Tipo de documento (\"CPF\" ou \"CNPJ\") val document: String?, // Documento val serialNumber: String?, // Número de série do terminal val fromDate: String?, // Data de início do relatório val toDate: String?, // Data final do relatório val fromTime: String?, // Hora inicial do relatório val toTime: String?, // Hora final do relatório val transactionData: List\u003cConsolidatedReportTransactionData\u003e?, // Lista de dados de transação conforme descrito abaixo val summary: ConsolidatedReportSummary? // Resumo do relatório consolidado conforme descrito abaixo ) data class ConsolidatedReportTransactionData( val brand: String?, // Bandeira do cartão val status: String?, // Status da transação (\"approved\" ou \"canceled\") val paymentType: Int?, // Inteiro, seguindo a enum class Option, descrito abaixo val totalValue: Int?, // Valor total de vendas dessa bandeira/tipo de pagamento/status val totalTransactions: Int? // Quantidade de transações dessa bandeira/tipo de pagamento/status ) data class ConsolidatedReportSummary( val totalApproved: Int?, // Valor total aprovado val totalCanceled: Int?, // Valor total cancelado val totalTransactionsApproved: Int?, // Quantidade total de transações aprovadas val totalTransactionsCanceled: Int? // Quantidade total de transações canceladas ) enum class Option(val code: Int) { CREDIT(0), // Crédito DEBIT(1), // Débito CREDIT_WITH_INSTALLMENTS(2), // Crédito parcelado VOUCHER(3), // Voucher PIX(4), // Pix UNKNOWN(-1) // Desconhecido }",
    "description": "Relatório consolidado Request que recupera um relatório consolidado por tipo de pagamento e bandeira do cartão, em um intervalo de tempo pré definido. Dica Você pode imprimir a via passando o objeto retornado para o request de impressão\nParâmetros receiptType -\u003e Tipo de relatório, no caso do consolidado: ReceiptType.CONSOLIDATED_REPORT reportFilter -\u003e Filtro do relatório, utilizando a data class ReportFilter data class ReportFilter( val threshold: ReportThreshold? = null, val fromDate: DateParameters? = null, val fromTime: TimeParameters = TimeParameters(0, 0), val toDate: DateParameters? = null, val toTime: TimeParameters = TimeParameters(23, 59) ) enum class ReportThreshold { TODAY, YESTERDAY, DAY_BEFORE_YESTERDAY, CUSTOM } data class DateParameters( val day: Int, val month: Int, val year: Int ) data class TimeParameters( val hour: Int, val minute: Int ) Exemplo SmartPOSPlugin.createReportsRequestBuilder() .receiptType(ReceiptType.CONSOLIDATED_REPORT) .reportFilter(filter) .callback(object : Callback\u003cReportResponse\u003e() { override fun onFail(error: Throwable) { // Erro processando relatório } override fun onSuccess(response: ReportResponse) { /* Relatório consolidado: */ val data = response.reportData.consolidatedReportData } }).build().run(Zoop::post) Retorno data class ConsolidatedReportData( val issueDate: String?, // Data de emissão do relatório val sellerName: String?, // Nome do seller val documentType: String?, // Tipo de documento (\"CPF\" ou \"CNPJ\") val document: String?, // Documento val serialNumber: String?, // Número de série do terminal val fromDate: String?, // Data de início do relatório val toDate: String?, // Data final do relatório val fromTime: String?, // Hora inicial do relatório val toTime: String?, // Hora final do relatório val transactionData: List\u003cConsolidatedReportTransactionData\u003e?, // Lista de dados de transação conforme descrito abaixo val summary: ConsolidatedReportSummary? // Resumo do relatório consolidado conforme descrito abaixo ) data class ConsolidatedReportTransactionData( val brand: String?, // Bandeira do cartão val status: String?, // Status da transação (\"approved\" ou \"canceled\") val paymentType: Int?, // Inteiro, seguindo a enum class Option, descrito abaixo val totalValue: Int?, // Valor total de vendas dessa bandeira/tipo de pagamento/status val totalTransactions: Int? // Quantidade de transações dessa bandeira/tipo de pagamento/status ) data class ConsolidatedReportSummary( val totalApproved: Int?, // Valor total aprovado val totalCanceled: Int?, // Valor total cancelado val totalTransactionsApproved: Int?, // Quantidade total de transações aprovadas val totalTransactionsCanceled: Int? // Quantidade total de transações canceladas ) enum class Option(val code: Int) { CREDIT(0), // Crédito DEBIT(1), // Débito CREDIT_WITH_INSTALLMENTS(2), // Crédito parcelado VOUCHER(3), // Voucher PIX(4), // Pix UNKNOWN(-1) // Desconhecido }",
    "tags": [],
    "title": "Consolidado",
    "uri": "/functions/reports/consolidated.html"
  },
  {
    "breadcrumb": "Zoop SmartPOS Plugin \u003e Requisitos",
    "content": "Capítulo 2 Requisitos Gertec GPOS720 Versão de Firmware Para uso no GPOS720, é necessário que o sistema operacional do dispositivo se encontre na Versão 164.0 ou superior. Clique aqui para ter acesso ao site do desenvolvedor da Gertec Verificando a versão do Firmware Para verificar a versão do firmware, é possível utilizar o menu do android, seguindo o caminho conforme fluxo abaixo: Configurar \u003e Sobre o dispositivo \u003e Numero da compilação Atualizando Firmware Siga as instruções do link a seguir, clique aqui. Ficha técnica Informações Valores Versão do Android Android 10 Processador Quad-Core 1.3GHz Memória RAM 2GB Memória Flash 16GB Display 5,5” 1280x720 Touchscreen capacitivo Câmera traseira 8MP, foco automático Câmera frontal Câmera frontal opcional de 5 MP Segurança PCI PTS 5.x e totalmente sem contato Conexão 4G + WiFi 2.4GHz / 5GHz / a/b/g/n + Bluetooth 4.2 e BLE Impressão Impressora Térmica Rápida bobinas com 40mm de diâmetro GPS GPS/ A-GPS / Glonass Bateria 7,6V / 2.500mAh Alimentação Fonte externa 5V - 2A - 110/220V Via USB C Peso 380.00 gr Dimensões (C x L x A) 213 X 79 x 52mm",
    "description": "Capítulo 2 Requisitos Gertec GPOS720 Versão de Firmware Para uso no GPOS720, é necessário que o sistema operacional do dispositivo se encontre na Versão 164.0 ou superior. Clique aqui para ter acesso ao site do desenvolvedor da Gertec Verificando a versão do Firmware Para verificar a versão do firmware, é possível utilizar o menu do android, seguindo o caminho conforme fluxo abaixo: Configurar \u003e Sobre o dispositivo \u003e Numero da compilação Atualizando Firmware Siga as instruções do link a seguir, clique aqui. Ficha técnica Informações Valores Versão do Android Android 10 Processador Quad-Core 1.3GHz Memória RAM 2GB Memória Flash 16GB Display 5,5” 1280x720 Touchscreen capacitivo Câmera traseira 8MP, foco automático Câmera frontal Câmera frontal opcional de 5 MP Segurança PCI PTS 5.x e totalmente sem contato Conexão 4G + WiFi 2.4GHz / 5GHz / a/b/g/n + Bluetooth 4.2 e BLE Impressão Impressora Térmica Rápida bobinas com 40mm de diâmetro GPS GPS/ A-GPS / Glonass Bateria 7,6V / 2.500mAh Alimentação Fonte externa 5V - 2A - 110/220V Via USB C Peso 380.00 gr Dimensões (C x L x A) 213 X 79 x 52mm",
    "tags": [],
    "title": "Gertec",
    "uri": "/requirements/gertec.html"
  },
  {
    "breadcrumb": "Zoop SmartPOS Plugin",
    "content": "Capítulo 2 Requisitos Resumo Aqui você encontra os requisitos para trabalhar com o terminal em sua máquina. Escolha o fabricante do seu terminal Tectoy/Pax Gertec",
    "description": "Capítulo 2 Requisitos Resumo Aqui você encontra os requisitos para trabalhar com o terminal em sua máquina. Escolha o fabricante do seu terminal Tectoy/Pax Gertec",
    "tags": [],
    "title": "Requisitos",
    "uri": "/requirements.html"
  },
  {
    "breadcrumb": "Zoop SmartPOS Plugin \u003e Requisitos",
    "content": "Capítulo 2 Requisitos Pax A910 Versão de Firmware Para uso no A910, é necessário que o dispositivo se encontre nas versões de firmware listadas a seguir: A910_PayDroid_6.0_Leo_V07.3.03_Brazil_20220927_OTA A910_PayDroid_6.0_Leo_modem_V07.3.10_OTA Verificando a versão do Firmware Para verificar a versão do firmware, é possível utilizar o menu do android, seguindo o caminho conforme fluxo abaixo: Configurar \u003e Sobre o telefone \u003e Custom build number Atualizando Firmware Para atualizar o firmware, é necessário entrar em contato com a Tectoy. Ficha técnica Informações Valores Versão do Android Android 6.0 ou 7.0 Câmera traseira Câmera traseira de 2 megapixels (ou 5 MP opcional) Câmera frontal Câmera frontal opcional de 0,3 MP Processador Processador Quad-core Cortex A7 Segurança PCI PTS 5.x e totalmente sem contato Conexão 4G + WiFi + Bluetooth Touch Tela de toque HD de 5 \" Impressão Impressora Térmica Rápida bobinas com 40mm de diâmetro GPS GPS embutido Recarregador Estação de acoplamento opcional Peso 500.00 gr Dimensões (L x A x C) 20.00 x 10.00 x 20.00 cm",
    "description": "Capítulo 2 Requisitos Pax A910 Versão de Firmware Para uso no A910, é necessário que o dispositivo se encontre nas versões de firmware listadas a seguir: A910_PayDroid_6.0_Leo_V07.3.03_Brazil_20220927_OTA A910_PayDroid_6.0_Leo_modem_V07.3.10_OTA Verificando a versão do Firmware Para verificar a versão do firmware, é possível utilizar o menu do android, seguindo o caminho conforme fluxo abaixo: Configurar \u003e Sobre o telefone \u003e Custom build number Atualizando Firmware Para atualizar o firmware, é necessário entrar em contato com a Tectoy. Ficha técnica Informações Valores Versão do Android Android 6.0 ou 7.0 Câmera traseira Câmera traseira de 2 megapixels (ou 5 MP opcional) Câmera frontal Câmera frontal opcional de 0,3 MP Processador Processador Quad-core Cortex A7 Segurança PCI PTS 5.x e totalmente sem contato Conexão 4G + WiFi + Bluetooth Touch Tela de toque HD de 5 \" Impressão Impressora Térmica Rápida bobinas com 40mm de diâmetro GPS GPS embutido Recarregador Estação de acoplamento opcional Peso 500.00 gr Dimensões (L x A x C) 20.00 x 10.00 x 20.00 cm",
    "tags": [],
    "title": "Tectoy/Pax",
    "uri": "/requirements/tectoy.html"
  },
  {
    "breadcrumb": "Zoop SmartPOS Plugin \u003e Releases",
    "content": "Pacote Basta modificar a versão no gradle, conforme exemplo:\nimplementation(\"br.zoop.pos.plugin:smartpos:1.6.3-rc-1\") Release Notes Correção de um bug no fluxo transacional na leitura do cartão",
    "description": "Pacote Basta modificar a versão no gradle, conforme exemplo:\nimplementation(\"br.zoop.pos.plugin:smartpos:1.6.3-rc-1\") Release Notes Correção de um bug no fluxo transacional na leitura do cartão",
    "tags": [],
    "title": "1.6.3",
    "uri": "/releases/1.6.3.html"
  },
  {
    "breadcrumb": "Zoop SmartPOS Plugin \u003e Funcionalidades",
    "content": "Ativação É necessário inicializar o SDK sem passar as credenciais, afim de realizar a requisição para recuperar as credenciais. Zoop.Initialize(context) Neste momento, é necessário injetar o plugin do smartPOS, conforme abaixo: val smartPOSPlugin = Zoop.make\u003cSmartPOSPlugin\u003e() Zoop.plug(smartPOSPlugin) Com o sdk inicializado, é necessário fazer uma ativação pelo seu dashboard para recuperar as credenciais*, utilizando um token gerado com a requisição de ativação, conforme exemplo a seguir. Dica Cada dispositivo só precisa fazer essa ativação uma única vez afim de criar o dispositivo na nossa base de dados, associando o dispositivo ao estabelecimento, após isso, é possível inicializar o plugin diretamente com as credenciais recebidas.\nExemplo val activationRequestBuilder = ZoopFoundationPlugin.createDashboardActivationRequestBuilder() .tokenCallback(object : Callback\u003cDashboardTokenResponse\u003e() { override fun onSuccess(response: DashboardTokenResponse) { // \"Apresentar token ao usuário: ${response.token}\" displayActivationToken(response.token) } override fun onFail(error: Throwable) { // \"Falha ao requisitar token\" displayTokenGenerationError() } } .confirmCallback(object : Callback\u003cDashboardConfirmationResponse\u003e() { override fun onSuccess(response: DashboardConfirmationResponse) { /** * Nesse ponto, é necessário guardar as credenciais localmente em um banco de dados/shared preferences, * para usar na próxima inicialização, passando como parâmetro na ativação */ saveCredentials(response) displayTokenActiveMessage() } override fun onFail(error: Throwable) { /** Caso o login seja cancelado, receberá a resposta aqui, com mensagem \"request canceled\" loginRequest.cancel() */ // \"Apresentar erro na confirmação do token: ${error.message}\" when (error) { is ZoopTimeoutException -\u003e displayTokenExpiredMessage() else -\u003e displayGenericTokenActivationMessageError() } } }) .themeCallback(object: Callback\u003cDashboardThemeResponse\u003e() { override fun onSuccess(response: DashboardThemeResponse) { /** * Aqui você recebe o esquema de cores configurado para o seller no dashboard, * e também sinaliza o sucesso no fluxo de ativação do terminal. */ applyBackgroundTheme(response) } override fun onFail(error: Throwable) { warnDownloadBackgroundThemeError() } }) .build() Zoop.post(activationRequestBuilder) *Observação: Você pode armazenar as credenciais localmente com a resposta do confirmCallback, fazendo isso, é possível informá-las na próxima inicialização sem precisar passar pela ativação via dashboard.\nOutras formas de ativação Request HTTP do tipo GET No lugar do {{serialdopos}}, adicionar o número de série do dispositivo (disponível na etiqueta na carcaça do dispositivo).\nhttps://payments.api.zoop.ws/zec-login/generateToken?serialNumber={{serialdopos}} Após realizar este request, o retorno será:\n{ \"token\": \"12345678\" } Com a resposta deste request, basta realizar o pareamento via dashboard conforme descrito anteriormente.\nAtivação via aplicativo de exemplo Instalar o app disponível aqui\nClicar no botão “Iniciar ativação”. Parear o token disponível no dashboard. Ao fim da ativação, o app exibirá as credenciais.",
    "description": "Ativação É necessário inicializar o SDK sem passar as credenciais, afim de realizar a requisição para recuperar as credenciais. Zoop.Initialize(context) Neste momento, é necessário injetar o plugin do smartPOS, conforme abaixo: val smartPOSPlugin = Zoop.make\u003cSmartPOSPlugin\u003e() Zoop.plug(smartPOSPlugin) Com o sdk inicializado, é necessário fazer uma ativação pelo seu dashboard para recuperar as credenciais*, utilizando um token gerado com a requisição de ativação, conforme exemplo a seguir. Dica Cada dispositivo só precisa fazer essa ativação uma única vez afim de criar o dispositivo na nossa base de dados, associando o dispositivo ao estabelecimento, após isso, é possível inicializar o plugin diretamente com as credenciais recebidas.",
    "tags": [],
    "title": "Ativação",
    "uri": "/functions/activation.html"
  },
  {
    "breadcrumb": "Zoop SmartPOS Plugin \u003e Primeiros passos",
    "content": "Configurando ambiente IDE Recomendamos o uso do Android Studio, na última versão disponível.\nLinguagem Hoje, seguimos o padrão do Android utilizando o Kotlin na versão 1.9.0\nDica Para exemplo, é possível seguir a implementação do app de teste no arquivo build.gradle",
    "description": "Configurando ambiente IDE Recomendamos o uso do Android Studio, na última versão disponível.\nLinguagem Hoje, seguimos o padrão do Android utilizando o Kotlin na versão 1.9.0\nDica Para exemplo, é possível seguir a implementação do app de teste no arquivo build.gradle",
    "tags": [],
    "title": "Configurando ambiente",
    "uri": "/first_steps/environment.html"
  },
  {
    "breadcrumb": "Zoop SmartPOS Plugin \u003e Funcionalidades \u003e Relatórios",
    "content": "Relatório detalhado Request que recupera um relatório detalhado com todas as transações, em um intervalo de tempo pré definido. Dica Você pode imprimir a via passando o objeto retornado para o request de impressão\nParâmetros receiptType -\u003e Tipo de relatório, no caso do consolidado: ReceiptType.DETAILED_REPORT reportFilter -\u003e Filtro do relatório, utilizando a data class ReportFilter data class ReportFilter( val threshold: ReportThreshold? = null, val fromDate: DateParameters? = null, val fromTime: TimeParameters = TimeParameters(0, 0), val toDate: DateParameters? = null, val toTime: TimeParameters = TimeParameters(23, 59) ) enum class ReportThreshold { TODAY, YESTERDAY, DAY_BEFORE_YESTERDAY, CUSTOM } data class DateParameters( val day: Int, val month: Int, val year: Int ) data class TimeParameters( val hour: Int, val minute: Int ) Exemplo SmartPOSPlugin.createReportsRequestBuilder() .receiptType(ReceiptType.DETAILED_REPORT) .reportFilter(filter) .callback(object : Callback\u003cReportResponse\u003e() { override fun onFail(error: Throwable) { onErrorProcessingReport() } override fun onSuccess(response: ReportResponse) { /* Relatório detalhado: */ val data = response.reportData.detailedReportData } }).build().run(Zoop::post) Retorno data class DetailedReportData( val issueDate: String?, // Data de emissão do relatório val sellerName: String?, // Nome do seller val documentType: String?, // Tipo de documento (\"CPF\" ou \"CNPJ\") val document: String?, // Documento val serialNumber: String?, // Número de série do terminal val fromDate: String?, // Data de início do relatório val toDate: String?, // Data final do relatório val fromTime: String?, // Hora inicial do relatório val toTime: String?, // Hora final do relatório val totalApproved: Int?, // Valor total aprovado val totalCanceled: Int?, // Valor total cancelado val approvedTransactions: List\u003cDetailedReportTransactionData\u003e?, // Lista de transações aprovadas val canceledTransactions: List\u003cDetailedReportTransactionData\u003e? // Lista de transações canceladas ) data class DetailedReportTransactionData( val paymentType: Int?, // Inteiro, seguindo a enum class Option, descrito abaixo val amount: Int?, // Valor da transação em centavos val date: String?, // Data da transação val time: String?, // Hora da transação val brand: String? // Bandeira do cartão ) enum class Option(val code: Int) { CREDIT(0), // Crédito DEBIT(1), // Débito CREDIT_WITH_INSTALLMENTS(2), // Crédito parcelado VOUCHER(3), // Voucher PIX(4), // Pix UNKNOWN(-1) // Desconhecido }",
    "description": "Relatório detalhado Request que recupera um relatório detalhado com todas as transações, em um intervalo de tempo pré definido. Dica Você pode imprimir a via passando o objeto retornado para o request de impressão\nParâmetros receiptType -\u003e Tipo de relatório, no caso do consolidado: ReceiptType.DETAILED_REPORT reportFilter -\u003e Filtro do relatório, utilizando a data class ReportFilter data class ReportFilter( val threshold: ReportThreshold? = null, val fromDate: DateParameters? = null, val fromTime: TimeParameters = TimeParameters(0, 0), val toDate: DateParameters? = null, val toTime: TimeParameters = TimeParameters(23, 59) ) enum class ReportThreshold { TODAY, YESTERDAY, DAY_BEFORE_YESTERDAY, CUSTOM } data class DateParameters( val day: Int, val month: Int, val year: Int ) data class TimeParameters( val hour: Int, val minute: Int ) Exemplo SmartPOSPlugin.createReportsRequestBuilder() .receiptType(ReceiptType.DETAILED_REPORT) .reportFilter(filter) .callback(object : Callback\u003cReportResponse\u003e() { override fun onFail(error: Throwable) { onErrorProcessingReport() } override fun onSuccess(response: ReportResponse) { /* Relatório detalhado: */ val data = response.reportData.detailedReportData } }).build().run(Zoop::post) Retorno data class DetailedReportData( val issueDate: String?, // Data de emissão do relatório val sellerName: String?, // Nome do seller val documentType: String?, // Tipo de documento (\"CPF\" ou \"CNPJ\") val document: String?, // Documento val serialNumber: String?, // Número de série do terminal val fromDate: String?, // Data de início do relatório val toDate: String?, // Data final do relatório val fromTime: String?, // Hora inicial do relatório val toTime: String?, // Hora final do relatório val totalApproved: Int?, // Valor total aprovado val totalCanceled: Int?, // Valor total cancelado val approvedTransactions: List\u003cDetailedReportTransactionData\u003e?, // Lista de transações aprovadas val canceledTransactions: List\u003cDetailedReportTransactionData\u003e? // Lista de transações canceladas ) data class DetailedReportTransactionData( val paymentType: Int?, // Inteiro, seguindo a enum class Option, descrito abaixo val amount: Int?, // Valor da transação em centavos val date: String?, // Data da transação val time: String?, // Hora da transação val brand: String? // Bandeira do cartão ) enum class Option(val code: Int) { CREDIT(0), // Crédito DEBIT(1), // Débito CREDIT_WITH_INSTALLMENTS(2), // Crédito parcelado VOUCHER(3), // Voucher PIX(4), // Pix UNKNOWN(-1) // Desconhecido }",
    "tags": [],
    "title": "Detalhado",
    "uri": "/functions/reports/detailed.html"
  },
  {
    "breadcrumb": "Zoop SmartPOS Plugin",
    "content": "Capítulo 3 Downloads Acesso aos arquivos de exemplo, e plugin para implementação do seu smartPOS.\nPlugin SmartPOS Código do aplicativo de exemplo Gertec GPOS720 Código do aplicativo de exemplo Pax A910/A910S Aplicativo de ativação para Tectoy/Pax",
    "description": "Capítulo 3 Downloads Acesso aos arquivos de exemplo, e plugin para implementação do seu smartPOS.\nPlugin SmartPOS Código do aplicativo de exemplo Gertec GPOS720 Código do aplicativo de exemplo Pax A910/A910S Aplicativo de ativação para Tectoy/Pax",
    "tags": [],
    "title": "Downloads",
    "uri": "/downloads.html"
  },
  {
    "breadcrumb": "Zoop SmartPOS Plugin \u003e Releases",
    "content": "Pacote Basta modificar a versão no gradle, conforme exemplo:\nimplementation(\"br.zoop.pos.plugin:smartpos:1.6.2-rc-1\") Release Notes Correção no fluxo do menu de opções da biblioteca compartilhada",
    "description": "Pacote Basta modificar a versão no gradle, conforme exemplo:\nimplementation(\"br.zoop.pos.plugin:smartpos:1.6.2-rc-1\") Release Notes Correção no fluxo do menu de opções da biblioteca compartilhada",
    "tags": [],
    "title": "1.6.2",
    "uri": "/releases/1.6.2.html"
  },
  {
    "breadcrumb": "Zoop SmartPOS Plugin \u003e Primeiros passos",
    "content": "Configuração Inicial O download de dependências é realizado via maven, conforme exemplo abaixo: // No gradle do projeto, apontar: allprojects { repositories { google() mavenCentral() mavenLocal() maven { url = uri(\"https://maven.pkg.github.com/getzoop/zoop-package-public\") credentials { username = \"MyCompanyGH\" // Seu usuário do GitHub. password = \"github_pat_...\" // Sua PAT do GitHub. } } } } // E adicionar como dependência de acordo com o modelo: implementation(\"br.zoop.pos.plugin:smartpos-gertec-gpos720:1.8.4\") // Para a Gertec GPOS720 implementation(\"br.zoop.pos.plugin:smartpos-pax-a910:1.8.4\") // Para a Pax A910/A910S Informação A GitHub personal access token (PAT) usada deve possuir no mínimo permissão para ler e obter pacotes/artefatos de repositórios públicos.\nDica Caso você tenha dúvidas a respeito da GitHub PAT, acesse a página de nosso repositório público. Já no README, apresentamos um guia para orientá-lo sobre como gerar uma GitHub PAT e quais permissões conceder a ela.\nDependências Adicionar ao build.gradle a nível de módulo: android { packagingOptions { jniLibs { useLegacyPackaging = true } } } dependencies { implementation(\"org.jetbrains.kotlin:kotlin-reflect:1.9.0\") implementation(\"org.jetbrains.kotlinx:kotlinx-datetime:0.3.0\") implementation(\"org.jetbrains.kotlinx:kotlinx-serialization-json:1.5.1\") implementation(\"com.squareup.okhttp:okhttp:2.5.0\") implementation(\"com.squareup.okhttp3:okhttp:4.10.0\") } Marcar no manifest -\u003e android:extractNativeLibs=\"true\" Permissões São necessárias as seguintes permissões: \u003cuses-permission android:name=\"android.permission.INTERNET\" /\u003e \u003cuses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" /\u003e \u003cuses-permission android:name=\"android.permission.ACCESS_WIFI_STATE\" /\u003e \u003cuses-permission android:name=\"android.permission.READ_PRIVILEGED_PHONE_STATE\" /\u003e \u003cuses-permission android:name=\"android.permission.READ_PHONE_STATE\" /\u003e \u003cuses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" /\u003e Após esse passo, você estará pronto para consumir os serviços do plugin, seguindo para inicialização",
    "description": "Configuração Inicial O download de dependências é realizado via maven, conforme exemplo abaixo: // No gradle do projeto, apontar: allprojects { repositories { google() mavenCentral() mavenLocal() maven { url = uri(\"https://maven.pkg.github.com/getzoop/zoop-package-public\") credentials { username = \"MyCompanyGH\" // Seu usuário do GitHub. password = \"github_pat_...\" // Sua PAT do GitHub. } } } } // E adicionar como dependência de acordo com o modelo: implementation(\"br.zoop.pos.plugin:smartpos-gertec-gpos720:1.8.4\") // Para a Gertec GPOS720 implementation(\"br.zoop.pos.plugin:smartpos-pax-a910:1.8.4\") // Para a Pax A910/A910S Informação A GitHub personal access token (PAT) usada deve possuir no mínimo permissão para ler e obter pacotes/artefatos de repositórios públicos.",
    "tags": [],
    "title": "Configuração do projeto",
    "uri": "/first_steps/configuration.html"
  },
  {
    "breadcrumb": "Zoop SmartPOS Plugin \u003e Funcionalidades",
    "content": "Inicialização Para utilizar o plugin, é necessário inicializar o SDK. Dica É necessário ativar o dispositivo conforme descrito aqui.\nExemplo após ativação Zoop.Initialize(context) { credentials { marketplace = \"{marketplace id}\" seller = \"{seller id}\" accessKey = \"{chave de acesso}\" } } Dados de ativação marketplace: marketplace salvo durante a ativação via dashboard.\nseller: seller salvo durante a ativação via dashboard.\naccessKey: accessKey salvo durante a ativação via dashboard.\nParâmetros extras Na inicialização, é possível configurar os parâmetros listados abaixo.\nEnvio de logs de erro e métricas Para habilitar o envio de logs e métricas para a Zoop, é necessário habilitar as flags\nZoop.setSendErrorLogs(true) // O valor padrão é false Zoop.setSendMetrics(true) // O valor padrão é false Configurando o log É possível configurar o nível de log e adicionar interceptors.\nConfigurando nível de log Zoop.setLogLevel(LogLevel.Debug) Adicionando interceptor Zoop.addLogInterceptor { level, category, message -\u003e MyLog(message) } Níveis de log disponíveis LogLevel.None LogLevel.Information LogLevel.Warning LogLevel.Error LogLevel.Critical LogLevel.Log LogLevel.Debug LogLevel.Trace LogLevel.Metric Ativando Strict Mode É possível ativar/desativar o strict mode.\nZoop.setStrict(true) Observação: Quando o SDK se encontra em strict mode, várias validações ocorrem quando um request está em andamento. Uma das verificações impede que o SDK atenda o request se o dispositivo estiver em modo desenvolvedor. Então é sugerido utilizar Zoop.setStric(false) quando estiver em estágio de desenvolvimento. Para facilitar, pode ser utilizada a flag de debug Zoop.setStrict(!Build.Debug).\nPlugando Após o SDK estar inicializado, conforme o passo anterior, é necessário criar a instância do plugin\nExemplo val smartPOSPlugin = SmartPOSPlugin(Zoop.constructorParameters()) Zoop.plug(smartPOSPlugin)",
    "description": "Inicialização Para utilizar o plugin, é necessário inicializar o SDK. Dica É necessário ativar o dispositivo conforme descrito aqui.\nExemplo após ativação Zoop.Initialize(context) { credentials { marketplace = \"{marketplace id}\" seller = \"{seller id}\" accessKey = \"{chave de acesso}\" } } Dados de ativação marketplace: marketplace salvo durante a ativação via dashboard.\nseller: seller salvo durante a ativação via dashboard.\naccessKey: accessKey salvo durante a ativação via dashboard.",
    "tags": [],
    "title": "Inicialização",
    "uri": "/functions/plug.html"
  },
  {
    "breadcrumb": "Zoop SmartPOS Plugin \u003e Funcionalidades \u003e Relatórios",
    "content": "Relatório de turnos O relatório de turnos é constituído por 3 requisições: Requisição que recupera um relatório do turno atual, ou, um turno previamente fechado. Requisição para fechar o turno, que recebe uma estrutura recuperada no request anterior. Requisição para recuperar uma lista com todos os turnos fechados anteriormente. Informação Caso não exista um turno fechado, é listado todas as transações do dispositivo desde a primeira transação. Caso exista um turno previamente fechado, o turno subsequente é listado a partir da data/hora do último turno.\nDica Você pode imprimir a via passando o objeto retornado para o request de impressão\nRequisição que recupera um relatório do turno atual, ou, um turno previamente fechado Parâmetros receiptType -\u003e Tipo de relatório, no caso de turno: ReceiptType.SHIFT_REPORT shiftId -\u003e Id do turno a ser recuperado, ou nulo para turno atual. Exemplo SmartPOSPlugin.createReportsRequestBuilder() .receiptType(ReceiptType.SHIFT_REPORT) .shiftId(null) .callback(object : Callback\u003cReportResponse\u003e() { override fun onFail(error: Throwable) { // Erro processando relatório } override fun onSuccess(response: ReportResponse) { /* Relatório de turno: */ val data = response.reportData.closedShiftsReportData } }).build().run(Zoop::post) Retorno data class ClosedShiftsReportData( val issueDate: String?, // Data de emissão do relatório val sellerName: String?, // Nome do seller val documentType: String?, // Tipo de documento (\"CPF\" ou \"CNPJ\") val document: String?, // Documento val serialNumber: String?, // Número de série do terminal val fromDate: String?, // Data de início do relatório val toDate: String?, // Data final do relatório val fromTime: String?, // Hora inicial do relatório val toTime: String?, // Hora final do relatório val transactionData: List\u003cClosedShiftsReportTransactionData\u003e?, // Lista de transações do turno conforme descrito abaixo val summary: ClosedShiftsReportSummary, // Resumo do turno conforme descrito abaixo val transactions: List\u003cTransactionData\u003e? = null // Transações do turno ) data class ClosedShiftsReportTransactionData( val status: String?, // Estado da transação (\"approved\" ou \"canceled\") val brand: String?, // Bandeira do cartão val value: Int?, // Valor em centavos val installments: Int?, // Número de parcelas val date: String?, // Data da transação val time: String?, // Hora da transação val paymentType: Int?, // Inteiro, seguindo a enum class Option, descrito abaixo val sumAmount: Int?, // Valor total de transações com este status val transactionsAmount: Int? // Quantidade de transações ) data class ClosedShiftsReportSummary( val totalApproved: Int?, // Valor total aprovado val totalCanceled: Int?, // Valor total cancelado val totalTransactionsApproved: Int?, // Quantidade total de transações aprovadas val totalTransactionsCanceled: Int? // Quantidade total de transações canceladas ) enum class Option(val code: Int) { CREDIT(0), // Crédito DEBIT(1), // Débito CREDIT_WITH_INSTALLMENTS(2), // Crédito parcelado VOUCHER(3), // Voucher PIX(4), // Pix UNKNOWN(-1) // Desconhecido } Requisição para fechar o turno, que recebe uma estrutura recuperada no request anterior. Parâmetros closedShiftsReportData -\u003e Estrutura do tipo ClosedShiftsReportData recuperado utilizando a primeira requisição Exemplo SmartPOSPlugin.createCloseShiftRequestBuilder() .closedShiftsReportData(shiftsReportData) .callback(object : Callback\u003cBoolean\u003e() { override fun onFail(error: Throwable) { // Falha ao fechar turno } override fun onSuccess(response: Boolean) { if (!response) { // Falha ao fechar turno return } else { // Turno fechado } } }).build().run(Zoop::post) Requisição para recuperar uma lista com todos os turnos fechados anteriormente. Exemplo SmartPOSPlugin.createClosedShiftsRequestBuilder() .callback(object : Callback\u003cClosedShiftsResponse\u003e() { override fun onFail(error: Throwable) { // Falha ao recuperar turnos fechados } override fun onSuccess(response: ClosedShiftsResponse) { if (response.shiftsList.isEmpty()) { // Sem turnos fechados return } /* List de turnos */ response.shiftsList } }) .build().run(Zoop::post) Retorno response.shiftsList -\u003e Tipo: List\u003cReportContext.ClosedShifts\u003e data class ClosedShifts( val title: String, // Título do turno, no formato \"data hora\". ex: \"18/05/2023 08:00\" val index: Int // Índice do turno fechado, para ser utilizado na requição de recuperar um turno previamente fechado passando o parâmetro shiftId. )",
    "description": "Relatório de turnos O relatório de turnos é constituído por 3 requisições: Requisição que recupera um relatório do turno atual, ou, um turno previamente fechado. Requisição para fechar o turno, que recebe uma estrutura recuperada no request anterior. Requisição para recuperar uma lista com todos os turnos fechados anteriormente. Informação Caso não exista um turno fechado, é listado todas as transações do dispositivo desde a primeira transação. Caso exista um turno previamente fechado, o turno subsequente é listado a partir da data/hora do último turno.",
    "tags": [],
    "title": "Turnos",
    "uri": "/functions/reports/shifts.html"
  },
  {
    "breadcrumb": "Zoop SmartPOS Plugin",
    "content": "Capítulo 4 Primeiros passos Aqui, você vai aprender sobre o que um smartPOS e como dar o pontapé no desenvolvimento do seu produto com o plugin da Zoop.",
    "description": "Capítulo 4 Primeiros passos Aqui, você vai aprender sobre o que um smartPOS e como dar o pontapé no desenvolvimento do seu produto com o plugin da Zoop.",
    "tags": [],
    "title": "Primeiros passos",
    "uri": "/first_steps.html"
  },
  {
    "breadcrumb": "Zoop SmartPOS Plugin \u003e Releases",
    "content": "Pacote Basta modificar a versão no gradle, conforme exemplo:\nimplementation(\"br.zoop.pos.plugin:smartpos:1.6.1-rc-1\") Release Notes Conserta um pequeno bug na requisição de pagamento via Pix",
    "description": "Pacote Basta modificar a versão no gradle, conforme exemplo:\nimplementation(\"br.zoop.pos.plugin:smartpos:1.6.1-rc-1\") Release Notes Conserta um pequeno bug na requisição de pagamento via Pix",
    "tags": [],
    "title": "1.6.1",
    "uri": "/releases/1.6.1.html"
  },
  {
    "breadcrumb": "Zoop SmartPOS Plugin \u003e Funcionalidades",
    "content": "Venda Dica É recomendado que você faça uma consulta de chave transacional na inicialização do plugin, caso a chave não exista no terminal, este deverá ser enviado para o fabricante(Pax), para correção. A ausência da chave impede a transação e não há correção do lado da Zoop.\nFaz-se uso da classe SmartPOSPaymentRequestBuilder. Input de senha No input de senha, a PAX configura o teclado como embaralhado por padrão. Para ter o teclado exibido corretamente, é necessário adicionar ao arquivo config.xml (ou criar, caso não exista), dentro de res/values/, alguns parâmetros, conforme abaixo: \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003cresources\u003e \u003cbool name=\"keyboard_random\"\u003efalse\u003c/bool\u003e \u003cbool name=\"show_input_box\"\u003efalse\u003c/bool\u003e \u003c/resources\u003e Exemplo de Pagamento val paymentRequest = SmartPOSPlugin.createPaymentRequestBuilder() .amount(1000) .option(Option.CREDIT) .installments(2) //.autoPrintEstablishmentReceipt(false) Para desabilitar a impressão automática. //.referenceId(\"\") Identificador próprio (opcional) //.metadata(buildJsonObject {}) Metadados adicionais (opcional) .callback(object: Callback\u003cSmartPOSPaymentResponse\u003e() { override fun onStart() { startLoadingAnimation() } override fun onSuccess(response: SmartPOSPaymentResponse) { handleSucessfullPayment(response) } override fun onFail(exception: Throwable) { handlePaymentFailure(exception) } override fun onComplete() { stopLoadingAnimation() } }) .messageCallback(object: Callback\u003cMessageCallbackRequestField.MessageData\u003e() { override fun onSuccess(messageData: MessageCallbackRequestField.MessageData) { displayUserMessage(messageData.message) } override fun onFail(exception: Throwable) { } }) .pinCallback(object: Callback\u003cPinCallbackRequestField.PinData\u003e() { override fun onSuccess(pinData: PinCallbackRequestField.PinData) { val eventType = pinData.getType(); when (eventType) { Terminal.PinEventHandler.EventType.Start -\u003e creatViewToDisplayPasswordInput() Terminal.PinEventHandler.EventType.Finish -\u003e finishPasswordInput() Terminal.PinEventHandler.EventType.Inserted -\u003e handlePasswordCaracterInput() Terminal.PinEventHandler.EventType.Removed -\u003e handlePasswordCaracterRemoved() else -\u003e handlePasswordCaracterCleared() } } override fun onFail(exception: Throwable) { } }) .menuSelectionCallback(object: Callback\u003cSmartPOSMenuOptions\u003e() { override fun onFail(error: Throwable) { } override fun onSuccess(response: SmartPOSMenuOptions) { assembleOptionsList(response.options.iterable) } override fun onFail(error: Throwable) { } }) .userInputCallback(object : Callback\u003cUserInput\u003e() { override fun onSuccess(response: UserInput) { when (response.type) { UserInputType.CVV -\u003e { requestCvv() } } } override fun onFail(error: Throwable) { } }) .build() Zoop.post(paymentRequest) Parâmetros de entrada Chave Tipo Objetivo Exemplo amount Long Valor da transação (em centavos). 2 (R$ 0,02) option Option Opção do pagamento (do tipo Option). Option.CREDIT installments Long Quantidade de parcelas. 2 autoPrintEstablishmentReceipt Boolean Imprimir ou não a via do estabelecimento automaticamente. true referenceId String Identificador próprio gerado pelo parceiro (opcional, máx. 50 caracteres) \"237ab31-g99c-4e25-9hjs-32u4d3gf7fh2\" metadata String (em JSON) ou JsonObject Metadados personalizados fornecidos pelo parceiro (opcional, máx. 512 caracteres). \"{\\\"parcelado\\\":false,\\\"tentativa\\\":1,\\\"vencimento\\\":\\\"2024-02-15\\\",\\\"versao\\\":\\\"1.23.4\\\"}\" Opções de pagamento Option { CREDIT, // Crédito à vista CREDIT_WITH_INSTALLMENTS, // Crédito parcelado DEBIT // Débito } Metadados em JsonObject Para criar um objeto de JsonObject, faça como no seguinte exemplo:\nval metadata = buildJsonObject { put(\"endereco\",\"Avenida X\") put(\"parcelado\", false) put(\"tentativa\", 1) } Callbacks .callback Responsável pelo fluxo do pagamento, início, processamento, conclusão (sucesso/falha). onStart -\u003e Esta callback é sinalizada quando o fluxo do pagamento começa, podendo ser sinalizado pela aplicação o início do processamento. OnSuccess -\u003e Neste momento, a transação foi aprovada, e você recebe o objeto do tipo SmartPOSPaymentResponse, contendo um *TransactionData, acessível por response.transactionData, contendo todos os dados da transação, caso a impressão automática de recibo esteja ativa, o recibo do estabelecimento será impresso. Para utilizar o request de impressão, será necessário passar este objeto para o request de impressão OnFail -\u003e Falha na transação, é recebido um exception, podendo ser do tipo: - ZoopPaymentException -\u003e Falha no fluxo do pagamento, neste caso, passamos a mensagem de erro, podendo ser acessada como exception.message - ZoopTimeoutException -\u003e Tempo excedido na operação - ZoopClosedConnectionException -\u003e Conexão interrompida - ZoopNetworkException -\u003e Falha de conexão OnComplete -\u003e Sinaliza o final do fluxo do pagamento, tanto em casos de sucesso/falha.\nReferência:\nTransactionData( val value: Int?, // Valor da transação em centavos val paymentType: Int?, // Tipo de pagamento val installments: Int?, // Parcelas val status: String?, // Status (approved/canceled) val brand: String?, // Marca do cartão ex: Visa val address: String?, // Endereço do seller val sellerName: String?, // Nome do seller val acquiring: String?, // Adquirente val pan: String?, // PAN do cartão val autoCode: String?, // Código de autorização val documentType: String?, // Tipo de documento, CPF/CNPJ val document: String?, // Documento val nsu: String?, // NSU val date: String?, // Data da transação val hour: String?, // Hora da transação val cv: String?, // CV val arqc: String?, // ARQC val aid: String?, // AID val sellerReceipt: String?, // Recibo do estabelecimento val customerReceipt: String?, // Recibo do cliente val approvalMessage: String?, // Mensagem de aprovação ex: APROVADA PELO EMISSOR val aidLabel: String?, // Label do cartão var transactionId: String?, // Id da transação val receiptId: String? = null, // Id do recibo, caso aplicável (hoje, apenas transações Pix) val pixId: String? = null, // Id do Pix val cardFingerprint: String? = null // Token único do cartão. ) .messageCallback Responsável pelas mensagens no fluxo do pagamento. ex: “Aproxime, insira ou passe o cartão” OnSuccess -\u003e Mensagem a ser exibida pela aplicação para o usuário, acessada como response.message OnFail -\u003e Não recebe nenhum dado, esta callback não é chamada.\n.pinCallback Responsável pelo input de senha, caso este seja necessário. OnSuccess -\u003e Esta callback é chamada passando o objeto do tipo PinCallbackRequestField.PinData, possui o parâmetro type, do tipo Terminal.PinEventHandler.EventType, acessível por response.type. OnFail -\u003e Não recebe nenhum dado, esta callback não é chamada.\nReferência:\nTerminal.PinEventHandler.EventType { Start, /* É necessário criar um view, em que o teclado de senha será exibido de forma automática. Você pode implementar sua tela de senha, exibindo os caracteres conforme recebido nos outros eventos deste tipo.*/ Finish, // Neste momento, o fluxo de senha foi finalizado, e a aplicação pode sinalizar pro usuário que agora a transação será processada. Inserted, // Caractere inserido na senha. Removed, // Caractere removido da senha. Cleared // Campo de senha foi limpo, todos os caracteres removidos. } .menuSelectionCallback Responsável por sinalizar que será necessário a seleção manual de uma aplicação do cartão. O POS deverá exibir uma lista com as opções, com o respectivo título recebido para cada objeto, e, em até 30 segundos deverá ser selecionado, caso não o seja, a operação será cancelada. Para selecionar é necessário utilizar o objeto recebido, selecionando no formato: response.options.select(MenuOptionsData) OnSuccess -\u003e Lista de itens para serem exibidos pela aplicação para o usuário. SmartPOSMenuOptions OnFail -\u003e Não recebe nenhum dado, esta callback não é chamada.\nReferência:\nSmartPOSMenuOptions( val options: List\u003cMenuOptionsData\u003e // Lista de itens, acessado como response.options.iterable, cada item dentro possui val title: String // Título do tipo de seleção requisitada. ex: \"Opções do cartão\" val defaultOption: Int // Opção padrão pré definida. ) // O item options, possui uma lista de itens do tipo MenuOptionsData MenuOptionsData( val index: Int // Valor a ser exibido como índice do item na lista. val itemName: String // Título do item do menu, ex: \"Crédito\" ) .userInputCallback Responsável por solicitar inputs da aplicação, como o CVV do cartão. OnSuccess -\u003e Recebe o objeto do tipo UserInput, com o parâmetro type, do tipo UserInputType, acessível por response.type. Para adicionar o input: userInput.input(cvv), ou para cancelar userInput.cancel() OnFail -\u003e Não recebe nenhum dado, esta callback não é chamada.\nReferência:\nenum class UserInputType { CVV, PHONE_NUMBER, AMOUNT, INSTALLMENTS, LAST_FOUR_DIGITS }",
    "description": "Venda Dica É recomendado que você faça uma consulta de chave transacional na inicialização do plugin, caso a chave não exista no terminal, este deverá ser enviado para o fabricante(Pax), para correção. A ausência da chave impede a transação e não há correção do lado da Zoop.\nFaz-se uso da classe SmartPOSPaymentRequestBuilder. Input de senha No input de senha, a PAX configura o teclado como embaralhado por padrão. Para ter o teclado exibido corretamente, é necessário adicionar ao arquivo config.xml (ou criar, caso não exista), dentro de res/values/, alguns parâmetros, conforme abaixo: \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003cresources\u003e \u003cbool name=\"keyboard_random\"\u003efalse\u003c/bool\u003e \u003cbool name=\"show_input_box\"\u003efalse\u003c/bool\u003e \u003c/resources\u003e Exemplo de Pagamento val paymentRequest = SmartPOSPlugin.createPaymentRequestBuilder() .amount(1000) .option(Option.CREDIT) .installments(2) //.autoPrintEstablishmentReceipt(false) Para desabilitar a impressão automática. //.referenceId(\"\") Identificador próprio (opcional) //.metadata(buildJsonObject {}) Metadados adicionais (opcional) .callback(object: Callback\u003cSmartPOSPaymentResponse\u003e() { override fun onStart() { startLoadingAnimation() } override fun onSuccess(response: SmartPOSPaymentResponse) { handleSucessfullPayment(response) } override fun onFail(exception: Throwable) { handlePaymentFailure(exception) } override fun onComplete() { stopLoadingAnimation() } }) .messageCallback(object: Callback\u003cMessageCallbackRequestField.MessageData\u003e() { override fun onSuccess(messageData: MessageCallbackRequestField.MessageData) { displayUserMessage(messageData.message) } override fun onFail(exception: Throwable) { } }) .pinCallback(object: Callback\u003cPinCallbackRequestField.PinData\u003e() { override fun onSuccess(pinData: PinCallbackRequestField.PinData) { val eventType = pinData.getType(); when (eventType) { Terminal.PinEventHandler.EventType.Start -\u003e creatViewToDisplayPasswordInput() Terminal.PinEventHandler.EventType.Finish -\u003e finishPasswordInput() Terminal.PinEventHandler.EventType.Inserted -\u003e handlePasswordCaracterInput() Terminal.PinEventHandler.EventType.Removed -\u003e handlePasswordCaracterRemoved() else -\u003e handlePasswordCaracterCleared() } } override fun onFail(exception: Throwable) { } }) .menuSelectionCallback(object: Callback\u003cSmartPOSMenuOptions\u003e() { override fun onFail(error: Throwable) { } override fun onSuccess(response: SmartPOSMenuOptions) { assembleOptionsList(response.options.iterable) } override fun onFail(error: Throwable) { } }) .userInputCallback(object : Callback\u003cUserInput\u003e() { override fun onSuccess(response: UserInput) { when (response.type) { UserInputType.CVV -\u003e { requestCvv() } } } override fun onFail(error: Throwable) { } }) .build() Zoop.post(paymentRequest) Parâmetros de entrada Chave Tipo Objetivo Exemplo amount Long Valor da transação (em centavos). 2 (R$ 0,02) option Option Opção do pagamento (do tipo Option). Option.CREDIT installments Long Quantidade de parcelas. 2 autoPrintEstablishmentReceipt Boolean Imprimir ou não a via do estabelecimento automaticamente. true referenceId String Identificador próprio gerado pelo parceiro (opcional, máx. 50 caracteres) \"237ab31-g99c-4e25-9hjs-32u4d3gf7fh2\" metadata String (em JSON) ou JsonObject Metadados personalizados fornecidos pelo parceiro (opcional, máx. 512 caracteres). \"{\\\"parcelado\\\":false,\\\"tentativa\\\":1,\\\"vencimento\\\":\\\"2024-02-15\\\",\\\"versao\\\":\\\"1.23.4\\\"}\" Opções de pagamento Option { CREDIT, // Crédito à vista CREDIT_WITH_INSTALLMENTS, // Crédito parcelado DEBIT // Débito } Metadados em JsonObject Para criar um objeto de JsonObject, faça como no seguinte exemplo:",
    "tags": [],
    "title": "Pagamento via cartão",
    "uri": "/functions/card_payment.html"
  },
  {
    "breadcrumb": "Zoop SmartPOS Plugin \u003e Primeiros passos",
    "content": "Escolha o fabricante do seu terminal Tectoy/Pax Gertec",
    "description": "Escolha o fabricante do seu terminal Tectoy/Pax Gertec",
    "tags": [],
    "title": "Deploy",
    "uri": "/first_steps/deploy.html"
  },
  {
    "breadcrumb": "Zoop SmartPOS Plugin",
    "content": "Capítulo 5 Funcionalidades Para realizar requests, selecione o serviço desejado. Inicialização Ativação Pagamento via cartão Pagamento via Pix Cancelamento Impressão Consultar chave transacional Atualizar carga de tabelas Detecção de cartão Relatórios Visualizar último recibo Token único por cartão",
    "description": "Capítulo 5 Funcionalidades Para realizar requests, selecione o serviço desejado. Inicialização Ativação Pagamento via cartão Pagamento via Pix Cancelamento Impressão Consultar chave transacional Atualizar carga de tabelas Detecção de cartão Relatórios Visualizar último recibo Token único por cartão",
    "tags": [],
    "title": "Funcionalidades",
    "uri": "/functions.html"
  },
  {
    "breadcrumb": "Zoop SmartPOS Plugin \u003e Releases",
    "content": "Pacote Basta modificar a versão no gradle, conforme exemplo:\nimplementation(\"br.zoop.pos.plugin:smartpos:1.6.0-rc-1\") Release Notes Adiciona consulta ao cardFingerPrint do cartão com um novo método descrito aqui. O cardFingerPrint é um código único e seguro gerado a partir dos dados do cartão. Correção de um bug no relatório de fechamento de turno em que as transações eram agrupadas incorretamente. Aviso Com a adição do campo cardFingerprint, pode ser necessário adaptar o uso da classe TransactionData na sua aplicação.",
    "description": "Pacote Basta modificar a versão no gradle, conforme exemplo:\nimplementation(\"br.zoop.pos.plugin:smartpos:1.6.0-rc-1\") Release Notes Adiciona consulta ao cardFingerPrint do cartão com um novo método descrito aqui. O cardFingerPrint é um código único e seguro gerado a partir dos dados do cartão. Correção de um bug no relatório de fechamento de turno em que as transações eram agrupadas incorretamente. Aviso Com a adição do campo cardFingerprint, pode ser necessário adaptar o uso da classe TransactionData na sua aplicação.",
    "tags": [],
    "title": "1.6.0",
    "uri": "/releases/1.6.0.html"
  },
  {
    "breadcrumb": "Zoop SmartPOS Plugin \u003e Funcionalidades",
    "content": "Pix Faz-se uso da classe SmartPOSPixPaymentRequestBuilder. Exemplo de Pix val pixRequest = SmartPOSPlugin.createPixPaymentRequestBuilder() .amount(1000) //.referenceId(\"\") Identificador próprio (opcional) //.metadata(buildJsonObject {}) Metadados adicionais (opcional) .callback(object: Callback\u003cSmartPOSPixPaymentResponse\u003e(){ override fun onSuccess(response: SmartPOSPixPaymentResponse) { handleSucessfullPayment(response) } override fun onFail(throwable: Throwable) { handlePaymentFailure(exception) } }) .qrCodeCallback(object: Callback\u003cQRCodeCallbackRequestField.QRCodeData\u003e() { override fun onSuccess(qrCodeData: QRCodeCallbackRequestField.QRCodeData) { showQRCode(qrCodeData.getData()); } override fun onFail(throwable: Throwable) { handleQrCodeFailure(throwable) } }) .transactionIdCallback(object: Callback\u003cTransactionIdCallbackRequestField.transactionIdData\u003e() { override fun onSuccess(transactionId: TransactionIdCallbackRequestField.transactionIdData) { storeTransactionId(transactionId.data) } override fun onFail(throwable: Throwable) { handleTransactionIdFailure(throwable) } }) .messageCallback(object: Callback\u003cMessageCallbackRequestField.MessageData\u003e() { override fun onSuccess(messageData: MessageCallbackRequestField.MessageData) { displayMessage() } override fun onFail(throwable: Throwable) { } }) .build() Zoop.post(request) Parâmetros de entrada Chave Tipo Objetivo Exemplo amount Long Valor da transação (em centavos). 2 (R$ 0,02) referenceId String Identificador próprio gerado pelo parceiro (opcional, máx. 50 caracteres) \"237ab31-g99c-4e25-9hjs-32u4d3gf7fh2\" metadata String (em JSON) ou JsonObject Metadados personalizados fornecidos pelo parceiro (opcional, máx. 512 caracteres). \"{\\\"parcelado\\\":false,\\\"tentativa\\\":1,\\\"vencimento\\\":\\\"2024-02-15\\\",\\\"versao\\\":\\\"1.23.4\\\"}\" Metadados em JsonObject Para criar um objeto de JsonObject, faça como no seguinte exemplo:\nval metadata = buildJsonObject { put(\"endereco\",\"Avenida X\") put(\"parcelado\", false) put(\"tentativa\", 1) } Callbacks .callback Responsável pelo fluxo do pagamento, início, processamento, conclusão (sucesso/falha). onStart -\u003e Esta callback é sinalizada quando o fluxo do pagamento começa, podendo ser sinalizado pela aplicação o início do processamento. OnSuccess -\u003e Neste momento, a transação foi aprovada, e você recebe o objeto do tipo SmartPOSPixPaymentResponse, contendo um *TransactionData, acessível por response.transactionData, contendo todos os dados da transação,, para utilizar o request de impressão, será necessário passar este objeto para o request de impressão. OnFail -\u003e Falha na transação, é recebido um exception, podendo ser do tipo: - ZoopPaymentException -\u003e Falha no fluxo do pagamento, neste caso, passamos a mensagem de erro, podendo ser acessada como exception.message - ZoopTimeoutException -\u003e Tempo excedido na operação - ZoopClosedConnectionException -\u003e Conexão interrompida - ZoopNetworkException -\u003e Falha de conexão OnComplete -\u003e Sinaliza o final do fluxo do pagamento, tanto em casos de sucesso/falha.\nReferência:\nTransactionData( val value: Int?, // Valor da transação em centavos val paymentType: Int?, // Tipo de pagamento val installments: Int?, // Parcelas val status: String?, // Status (approved/canceled) val brand: String?, // Marca do cartão ex: Visa val address: String?, // Endereço do seller val sellerName: String?, // Nome do seller val acquiring: String?, // Adquirente val pan: String?, // PAN do cartão val autoCode: String?, // Código de autorização val documentType: String?, // Tipo de documento, CPF/CNPJ val document: String?, // Documento val nsu: String?, // NSU val date: String?, // Data da transação val hour: String?, // Hora da transação val cv: String?, // CV val arqc: String?, // ARQC val aid: String?, // AID val sellerReceipt: String?, // Recibo do estabelecimento val customerReceipt: String?, // Recibo do cliente val approvalMessage: String?, // Mensagem de aprovação ex: APROVADA PELO EMISSOR, val aidLabel: String?, // Label do cartão var transactionId: String?, // Id da transação val receiptId: String? = null, // Id do recibo, caso aplicável (hoje, apenas transações Pix) val pixId: String? = null, // Id do Pix val cardFingerprint: String? = null // Token único do cartão. ) // No caso de uma transação Pix, ambos campos transactionId e pixId, sendo pixId um identificador interno da zoop. .qrCodeCallback Responsável por receber o QRCode para exibição no POS. OnSuccess -\u003e QRCode a ser exibida pela aplicação para o usuário, acessada como response.data OnFail -\u003e Não recebe nenhum dado, esta callback não é chamada.\n.transactionIdCallback Responsável por receber o ID da transação. onSuccess -\u003e ID da transação na infraestrutura Zoop, acessada em response.data. onFail -\u003e Não recebe nenhum dado, esta callback não é chamada.\n.messageCallback Responsável pelas mensagens no fluxo do pagamento. ex: “Aproxime, insira ou passe o cartão” OnSuccess -\u003e Mensagem a ser exibida pela aplicação para o usuário, acessada como response.message OnFail -\u003e Não recebe nenhum dado, esta callback não é chamada.",
    "description": "Pix Faz-se uso da classe SmartPOSPixPaymentRequestBuilder. Exemplo de Pix val pixRequest = SmartPOSPlugin.createPixPaymentRequestBuilder() .amount(1000) //.referenceId(\"\") Identificador próprio (opcional) //.metadata(buildJsonObject {}) Metadados adicionais (opcional) .callback(object: Callback\u003cSmartPOSPixPaymentResponse\u003e(){ override fun onSuccess(response: SmartPOSPixPaymentResponse) { handleSucessfullPayment(response) } override fun onFail(throwable: Throwable) { handlePaymentFailure(exception) } }) .qrCodeCallback(object: Callback\u003cQRCodeCallbackRequestField.QRCodeData\u003e() { override fun onSuccess(qrCodeData: QRCodeCallbackRequestField.QRCodeData) { showQRCode(qrCodeData.getData()); } override fun onFail(throwable: Throwable) { handleQrCodeFailure(throwable) } }) .transactionIdCallback(object: Callback\u003cTransactionIdCallbackRequestField.transactionIdData\u003e() { override fun onSuccess(transactionId: TransactionIdCallbackRequestField.transactionIdData) { storeTransactionId(transactionId.data) } override fun onFail(throwable: Throwable) { handleTransactionIdFailure(throwable) } }) .messageCallback(object: Callback\u003cMessageCallbackRequestField.MessageData\u003e() { override fun onSuccess(messageData: MessageCallbackRequestField.MessageData) { displayMessage() } override fun onFail(throwable: Throwable) { } }) .build() Zoop.post(request) Parâmetros de entrada Chave Tipo Objetivo Exemplo amount Long Valor da transação (em centavos). 2 (R$ 0,02) referenceId String Identificador próprio gerado pelo parceiro (opcional, máx. 50 caracteres) \"237ab31-g99c-4e25-9hjs-32u4d3gf7fh2\" metadata String (em JSON) ou JsonObject Metadados personalizados fornecidos pelo parceiro (opcional, máx. 512 caracteres). \"{\\\"parcelado\\\":false,\\\"tentativa\\\":1,\\\"vencimento\\\":\\\"2024-02-15\\\",\\\"versao\\\":\\\"1.23.4\\\"}\" Metadados em JsonObject Para criar um objeto de JsonObject, faça como no seguinte exemplo:",
    "tags": [],
    "title": "Pagamento via Pix",
    "uri": "/functions/pix_payment.html"
  },
  {
    "breadcrumb": "Zoop SmartPOS Plugin",
    "content": "Capítulo 6 Métodos do fabricante É possível utilizar um request para obter uma referência que dá acesso aos métodos do fabricante, possibilitando:\nFaz-se uso da classe SmartPOSPublicDeviceRequestBuilder. Métodos disponíveis setMenuPasswordEnabled -\u003e Habilita ou desabilita a senha para acesso às configurações do Android. setApn -\u003e Configura e conecta em uma apn, passando um objeto do tipo ApnCredentials. setNavigationKeyEnabled -\u003e Habilita ou desabilita um botão físico de navegação do Android. setAutoTimeZone -\u003e Habilita ou desabilita o fuso horário automático. setAutoTime -\u003e Habilita ou desabilita a hora automática. setTimeZone -\u003e Configura o fuso horário no formato Continent/Cidade ex: America/Sao_Paulo getSerialNumber -\u003e Retorna o número de série do terminal. isDebugDevice -\u003e Flag que indica se o terminal é de desenvolvimento. Exemplo SmartPOSPlugin.createPublicDeviceRequestBuilder() .callback(object : Callback\u003cWeakReference\u003cPublicDevice\u003e\u003e() { override fun onFail(error: Throwable) { } override fun onSuccess(response: WeakReference\u003cPublicDevice\u003e) { response.get()?.setMenuPasswordEnabled(false) } }).build().run { Zoop.post(this) }",
    "description": "Capítulo 6 Métodos do fabricante É possível utilizar um request para obter uma referência que dá acesso aos métodos do fabricante, possibilitando:\nFaz-se uso da classe SmartPOSPublicDeviceRequestBuilder. Métodos disponíveis setMenuPasswordEnabled -\u003e Habilita ou desabilita a senha para acesso às configurações do Android. setApn -\u003e Configura e conecta em uma apn, passando um objeto do tipo ApnCredentials. setNavigationKeyEnabled -\u003e Habilita ou desabilita um botão físico de navegação do Android. setAutoTimeZone -\u003e Habilita ou desabilita o fuso horário automático. setAutoTime -\u003e Habilita ou desabilita a hora automática. setTimeZone -\u003e Configura o fuso horário no formato Continent/Cidade ex: America/Sao_Paulo getSerialNumber -\u003e Retorna o número de série do terminal. isDebugDevice -\u003e Flag que indica se o terminal é de desenvolvimento. Exemplo SmartPOSPlugin.createPublicDeviceRequestBuilder() .callback(object : Callback\u003cWeakReference\u003cPublicDevice\u003e\u003e() { override fun onFail(error: Throwable) { } override fun onSuccess(response: WeakReference\u003cPublicDevice\u003e) { response.get()?.setMenuPasswordEnabled(false) } }).build().run { Zoop.post(this) }",
    "tags": [],
    "title": "Métodos do fabricante",
    "uri": "/manufacturer.html"
  },
  {
    "breadcrumb": "Zoop SmartPOS Plugin \u003e Releases",
    "content": "Pacote Basta modificar a versão no gradle, conforme exemplo:\nimplementation(\"br.zoop.pos.plugin:smartpos:1.5.1-rc-1\") Release Notes Corrige um pequeno bug no gerenciamento do banco de dados durante a ativação do plugin.",
    "description": "Pacote Basta modificar a versão no gradle, conforme exemplo:\nimplementation(\"br.zoop.pos.plugin:smartpos:1.5.1-rc-1\") Release Notes Corrige um pequeno bug no gerenciamento do banco de dados durante a ativação do plugin.",
    "tags": [],
    "title": "1.5.1",
    "uri": "/releases/1.5.1.html"
  },
  {
    "breadcrumb": "Zoop SmartPOS Plugin \u003e Funcionalidades",
    "content": "Cancelamento Faz-se uso da classe SmartPOSVoidRequestBuilder. Exemplo de Cancelamento val voidRequest = SmartPOSPlugin.createVoidRequestBuilder() .callback(object: Callback\u003cSmartPOSVoidResponse\u003e() { override fun onStart() { startLoadingAnimation() } override fun onSuccess(response: SmartPOSVoidResponse) { handleSucessfullVoid(response) } override fun onFail(exception: Throwable) { handleVoidFailure(exception) } override fun onComplete() { stopLoadingAnimation() } }) .voidTransactionCallback(object: Callback\u003cVoidTransaction\u003e() { override fun onSuccess(response: VoidTransaction) { assembleList(response) } override fun onFail(exception: Throwable) { } }) .messageCallback(object: Callback\u003cMessageCallbackRequestField.MessageData\u003e() { override fun onSuccess(messageData: MessageCallbackRequestField.MessageData) { displayMessage() } override fun onFail(throwable: Throwable) { } }) .menuSelectionCallback(object: Callback\u003cSmartPOSMenuOptions\u003e() { override fun onSuccess(response: SmartPOSMenuOptions) { assembleOptionsList(response.options.iterable) } override fun onFail(error: Throwable) { } }) .build() Zoop.post(voidRequest) Callbacks .callback Responsável pelo fluxo do cancelamento, início, processamento, conclusão (sucesso/falha). onStart -\u003e Esta callback é sinalizada quando o fluxo do cancelamento começa, podendo ser sinalizado pela aplicação o início do processamento. OnSuccess -\u003e Neste momento, a transação foi cancelada, e você recebe o objeto SmartPOSVoidResponsecontendo um *TransactionData, contendo todos os dados da transação. Para utilizar o request de impressão, será necessário passar este objeto para o request de impressão OnFail -\u003e Falha no cancelamento, é recebido um exception, podendo ser do tipo: - ZoopPaymentException -\u003e Falha no fluxo do pagamento, neste caso, passamos a mensagem de erro, podendo ser acessada como exception.message - ZoopTimeoutException -\u003e Tempo excedido na operação - ZoopClosedConnectionException -\u003e Conexão interrompida - ZoopNetworkException -\u003e Falha de conexão OnComplete -\u003e Sinaliza o final do fluxo do cancelamento, tanto em casos de sucesso/falha.\nReferência:\nTransactionData( val value: Int?, // Valor da transação em centavos val paymentType: Int?, // Tipo de pagamento val installments: Int?, // Parcelas val status: String?, // Status (approved/canceled) val brand: String?, // Marca do cartão ex: Visa val address: String?, // Endereço do seller val sellerName: String?, // Nome do seller val acquiring: String?, // Adquirente val pan: String?, // PAN do cartão val autoCode: String?, // Código de autorização val documentType: String?, // Tipo de documento, CPF/CNPJ val document: String?, // Documento val nsu: String?, // NSU val date: String?, // Data da transação val hour: String?, // Hora da transação val cv: String?, // CV val arqc: String?, // ARQC val aid: String?, // AID val sellerReceipt: String?, // Recibo do estabelecimento val customerReceipt: String?, // Recibo do cliente val approvalMessage: String?, // Mensagem de aprovação ex: APROVADA PELO EMISSOR, val aidLabel: String?, // Label do cartão var transactionId: String?, // Id da transação val receiptId: String? = null, // Id do recibo, caso aplicável (hoje, apenas transações Pix) val pixId: String? = null, // Id do Pix val cardFingerprint: String? = null // Token único do cartão. ) .messageCallback Responsável pelas mensagens no fluxo do cancelamento. ex: “Aproxime, insira ou passe o cartão” OnSuccess -\u003e Mensagem a ser exibida pela aplicação para o usuário, acessada como response.message OnFail -\u003e Não recebe nenhum dado, esta callback não é chamada.\n.menuSelectionCallback Responsável por sinalizar que será necessário a seleção manual de uma aplicação do cartão.\nO POS deverá exibir uma lista com as opções, com o respectivo título recebido para cada objeto, e, em até 30 segundos deverá ser selecionado, caso não o seja, a operação será cancelada.\nPara selecionar é necessário utilizar o objeto recebido, selecionando no formato: response.options.select(MenuOptionsData)\nOnSuccess -\u003e Lista de itens para serem exibidos pela aplicação para o usuário. SmartPOSMenuOptions\nOnFail -\u003e Não recebe nenhum dado, esta callback não é chamada.\nReferência:\nSmartPOSMenuOptions( val options: List\u003cMenuOptionsData\u003e // Lista de itens, acessado como response.options.iterable, cada item dentro possui val title: String // Título do tipo de seleção requisitada. ex: \"Opções do cartão\" val defaultOption: Int // Opção padrão pré definida. ) // O item options, possui uma lista de itens do tipo MenuOptionsData MenuOptionsData( val index: Int // Valor a ser exibido como índice do item na lista. val itemName: String // Título do item do menu, ex: \"Crédito\" ) .voidTransactionCallback Responsável pela seleção da transação a ser cancelada, a partir de uma lista (a lista é forncida neste callback) OnSuccess -\u003e É recebido um objeto UserSelection\u003cVoidTransaction\u003e contendo um objeto iterable (acessada por response.items) a ser exibida pela aplicação para o usuário, a seleção de transação para cancelamento, é feita neste objeto. Cada item no objeto é uma transação. OnFail -\u003e Não recebe nenhum dado, esta callback não é chamada.\nReferência:\npublic final data class VoidTransaction( val id: String, val amount: String, val option: Option, val cardBrand: CardBrand, val date: String, val time: String ) Observações Deverá ser apresentada uma listagem de transações para o usuário. Neste ponto, uma transação deverá ser selecionada, daí, será cancelada e notificada na messageCallback. A transação é selecionada utilizando o método: response.select(VoidTransaction) no objeto UserSelection\u003cVoidTransaction\u003e O tempo de seleção para transação de cancelamento é de 30 segundos, após, a operação será cancelada e notificada na messageCallback.",
    "description": "Cancelamento Faz-se uso da classe SmartPOSVoidRequestBuilder. Exemplo de Cancelamento val voidRequest = SmartPOSPlugin.createVoidRequestBuilder() .callback(object: Callback\u003cSmartPOSVoidResponse\u003e() { override fun onStart() { startLoadingAnimation() } override fun onSuccess(response: SmartPOSVoidResponse) { handleSucessfullVoid(response) } override fun onFail(exception: Throwable) { handleVoidFailure(exception) } override fun onComplete() { stopLoadingAnimation() } }) .voidTransactionCallback(object: Callback\u003cVoidTransaction\u003e() { override fun onSuccess(response: VoidTransaction) { assembleList(response) } override fun onFail(exception: Throwable) { } }) .messageCallback(object: Callback\u003cMessageCallbackRequestField.MessageData\u003e() { override fun onSuccess(messageData: MessageCallbackRequestField.MessageData) { displayMessage() } override fun onFail(throwable: Throwable) { } }) .menuSelectionCallback(object: Callback\u003cSmartPOSMenuOptions\u003e() { override fun onSuccess(response: SmartPOSMenuOptions) { assembleOptionsList(response.options.iterable) } override fun onFail(error: Throwable) { } }) .build() Zoop.post(voidRequest) Callbacks .callback Responsável pelo fluxo do cancelamento, início, processamento, conclusão (sucesso/falha). onStart -\u003e Esta callback é sinalizada quando o fluxo do cancelamento começa, podendo ser sinalizado pela aplicação o início do processamento. OnSuccess -\u003e Neste momento, a transação foi cancelada, e você recebe o objeto SmartPOSVoidResponsecontendo um *TransactionData, contendo todos os dados da transação. Para utilizar o request de impressão, será necessário passar este objeto para o request de impressão OnFail -\u003e Falha no cancelamento, é recebido um exception, podendo ser do tipo: - ZoopPaymentException -\u003e Falha no fluxo do pagamento, neste caso, passamos a mensagem de erro, podendo ser acessada como exception.message - ZoopTimeoutException -\u003e Tempo excedido na operação - ZoopClosedConnectionException -\u003e Conexão interrompida - ZoopNetworkException -\u003e Falha de conexão OnComplete -\u003e Sinaliza o final do fluxo do cancelamento, tanto em casos de sucesso/falha.",
    "tags": [],
    "title": "Cancelamento",
    "uri": "/functions/cancel_payment.html"
  },
  {
    "breadcrumb": "Zoop SmartPOS Plugin \u003e Releases",
    "content": "Pacote Basta modificar a versão no gradle, conforme exemplo:\nimplementation(\"br.zoop.pos.plugin:smartpos:1.5.0-rc-1\") Release Notes Corrige validação de comunicação com o sistema Zoop afim de notificar a mensagem correta em caso de indisponibilidade de sistema. Adiciona dois novos campos (receiptId e pixId) na data class TransactionData, passando a notificar o id correto do Pix no campo transactionId, e associando ao id anterior o campo pixId. Conexão com o sistema de pagamento do backend assíncrono, com ganho expressivo de performance até o momento de leitura de cartão. Aviso Com a adição dos campos pixId e receiptId, pode ser necessário adaptar o uso da classe TransactionData na sua aplicação.",
    "description": "Pacote Basta modificar a versão no gradle, conforme exemplo:\nimplementation(\"br.zoop.pos.plugin:smartpos:1.5.0-rc-1\") Release Notes Corrige validação de comunicação com o sistema Zoop afim de notificar a mensagem correta em caso de indisponibilidade de sistema. Adiciona dois novos campos (receiptId e pixId) na data class TransactionData, passando a notificar o id correto do Pix no campo transactionId, e associando ao id anterior o campo pixId. Conexão com o sistema de pagamento do backend assíncrono, com ganho expressivo de performance até o momento de leitura de cartão. Aviso Com a adição dos campos pixId e receiptId, pode ser necessário adaptar o uso da classe TransactionData na sua aplicação.",
    "tags": [],
    "title": "1.5.0",
    "uri": "/releases/1.5.0.html"
  },
  {
    "breadcrumb": "Zoop SmartPOS Plugin \u003e Funcionalidades",
    "content": "Impressão Faz-se uso da classe SmartPOSPrinterRequestBuilder. Aviso Este SDK não tem suporte para criação de recibo de pagamento customizado. Caso o integrador queira fazer uso da impressora nesse formato, deve-se utilizar a API do fabricante com suporte do mesmo.\nObservações O plugin é capaz de imprimir recibos do tipo:\nReceiptType { ESTABLISHMENT, // Via estabelecimento CUSTOMER, // Via cliente REPRINT_ESTABLISHMENT, // Reimpressão de via do estabelecimento REPRINT_CUSTOMER, // Reimpressão de via do cliente DETAILED_REPORT, // Relatório detalhado¹ CONSOLIDATED_REPORT, // Relatório consolidado¹ SHIFT_REPORT // Relatório de fechamento de turno¹ } ¹ Para esses fluxos, nesse momento, é necessário receber um objeto pronto do respectivo tipo.\nExemplo de Impressão val request = SmartPOSPlugin.createPrintRequestBuilder() .printData(Printer.PrintData(transactionData = transactionData)) .receiptType(ReceiptType.ESTABLISHMENT) .callback(object : Callback\u003cSmartPOSPrinterResponse\u003e() { override fun onStart() { handlePrintStarted() } override fun onSuccess(response: SmartPOSPrinterResponse) { handlePrintSuccess() } override fun onFail(error: Throwable) { handlePrinterError() } override fun onComplete() { handlePrintFinished() } }).build() Zoop.post(request) Parâmetros de entrada Chave Tipo Objetivo Exemplo printData Printer.PrintData Objeto contendo os dados de impressão Printer.PrintData(transactionData = transactionData) receiptType ReceiptType Tipo do recibo ReceiptType.ESTABLISHMENT Referência\n// Tipo do objeto a ser passado, nos casos de compra/cancelamento, sempre é passado do tipo TransactionData, os outros devem ser ignorados. // Os tipos relacionados a relatório, são utilizados com o respectivo ReceiptType. PrintData( val transactionData: TransactionData? = null, val consolidatedReportData: ConsolidatedReportData? = null, val detailedReportData: DetailedReportData? = null, val closedShiftsReportData: ClosedShiftsReportData? = null ) ReceiptType { ESTABLISHMENT(\"VIA ESTABELECIMENTO\"), CUSTOMER(\"VIA CLIENTE\"), REPRINT_ESTABLISHMENT(\"REIMPRESSAO VIA ESTABELECIMENTO\"), REPRINT_CUSTOMER(\"REIMPRESSAO VIA CLIENTE\"), DETAILED_REPORT(\"RELATORIO CONSOLIDADO\"), CONSOLIDATED_REPORT(\"RELATORIO CONSOLIDADO\"), SHIFT_REPORT(\"FECHAMENTO DE TURNO\") } // Venda / Cancelamento / Reimpressão data class TransactionData( val value: Int?, val paymentType: Int?, val installments: Int?, val status: String?, val brand: String?, val address: String?, val sellerName: String?, val acquiring: String?, val pan: String?, val autoCode: String?, val documentType: String?, val document: String?, val nsu: String?, val date: String?, val hour: String?, val cv: String?, val arqc: String?, val aid: String?, val idPix: String?, val sellerReceipt: String?, val customerReceipt: String?, val approvalMessage: String?, var transactionId: String? // Id da transação val receiptId: String? = null, // Id do recibo, caso aplicável (hoje, apenas transações Pix) val pixId: String? = null, // Id do Pix val cardFingerprint: String? = null // Token único do cartão. ) // Relatório consolidado data class ConsolidatedReportData( val issueDate: String?, val sellerName: String?, val documentType: String?, val document: String?, val serialNumber: String?, val fromDate: String?, val toDate: String?, val fromTime: String?, val toTime: String?, val transactionData: List\u003cConsolidatedReportTransactionData\u003e?, val summary: ConsolidatedReportSummary? ) data class ConsolidatedReportTransactionData( val brand: String?, val status: String?, val totalValue: Int?, val totalTransactions: Int? ) data class ConsolidatedReportSummary( val totalApproved: Int?, val totalCanceled: Int?, val totalTransactionsApproved: Int?, val totalTransactionsCanceled: Int? ) // Relatório detalhado data class DetailedReportData( val issueDate: String?, val sellerName: String?, val documentType: String?, val document: String?, val serialNumber: String?, val fromDate: String?, val toDate: String?, val fromTime: String?, val toTime: String?, val totalApproved: Int?, val totalCanceled: Int?, val approvedTransactions: List\u003cDetailedReportTransactionData\u003e?, val canceledTransactions: List\u003cDetailedReportTransactionData\u003e? ) data class DetailedReportTransactionData( val paymentType: Int?, val amount: Int?, val date: String?, val time: String?, val brand: String? ) // Relatório de fechamento de turno data class ClosedShiftsReportData( val issueDate: String?, val sellerName: String?, val documentType: String?, val document: String?, val serialNumber: String?, val fromDate: String?, val toDate: String?, val fromTime: String?, val toTime: String?, val transactionData: List\u003cClosedShiftsReportTransactionData\u003e?, val summary: ClosedShiftsReportSummary ) data class ClosedShiftsReportTransactionData( val status: String?, val brand: String?, val value: Int?, val installments: Int?, val date: String?, val time: String?, val paymentType: Int?, val sumAmount: Int?, val transactionsAmount: Int? ) data class ClosedShiftsReportSummary( val totalApproved: Int?, val totalCanceled: Int?, val totalTransactionsApproved: Int?, val totalTransactionsCanceled: Int? ) Diretrizes para Identificação e Registro de Comprovantes de Transação Com o intuito de identificar facilmente a origem dos comprovantes e organizar adequadamente os documentos, recomenda-se incluir dados que permitam rastrear e diferenciar cada comprovante. Aqui estão algumas sugestões que você pode considerar:\nNúmero de Série É um identificador único atribuído ao dispositivo. Esse número é utilizado pelos fabricantes para identificar cada unidade de forma única.\nNúmero da Versão É um número que especifica a versão pública do aplicativo. Normalmente, ele é definido em um atributo no arquivo build.gradle(.kts) do seu aplicativo Android.\nInformação O número da versão incluído no identificador do comprovante impresso pelo plugin é derivado da propriedade versionName do PackageInfo obtido para o pacote do aplicativo pelo PackageManager do SDK Android.\nIdentificador de Captura do Cartão Se o comprovante se refere a uma transação com cartão, incluir um identificador do modo de captura das informações do cartão pode esclarecer como essa transação foi realizada.\nC - Chip de contato: Para transações realizadas com o chip de contato do cartão. N - Contactless/NFC: Para transações realizadas via tecnologia de aproximação (contactless) ou NFC (Near Field Communication). T - Tarja magnética: Para transações realizadas com a tarja magnética do cartão. F - Fallback (qualquer tipo): Para transações realizadas por métodos de fallback, quando o modo padrão não está disponível. Exemplo Na imagem abaixo, apresentamos alguns exemplos de comprovantes de pagamentos e de cancelamentos, impressos pelo plugin, constando um identificador ao final do comprovante. O identificador segue o formato \u003cIDENTIFICADOR DE CAPTURA\u003e\u003cNÚMERO DE SÉRIE\u003e\u003cNÚMERO DA VERSÃO\u003e.",
    "description": "Impressão Faz-se uso da classe SmartPOSPrinterRequestBuilder. Aviso Este SDK não tem suporte para criação de recibo de pagamento customizado. Caso o integrador queira fazer uso da impressora nesse formato, deve-se utilizar a API do fabricante com suporte do mesmo.\nObservações O plugin é capaz de imprimir recibos do tipo:\nReceiptType { ESTABLISHMENT, // Via estabelecimento CUSTOMER, // Via cliente REPRINT_ESTABLISHMENT, // Reimpressão de via do estabelecimento REPRINT_CUSTOMER, // Reimpressão de via do cliente DETAILED_REPORT, // Relatório detalhado¹ CONSOLIDATED_REPORT, // Relatório consolidado¹ SHIFT_REPORT // Relatório de fechamento de turno¹ } ¹ Para esses fluxos, nesse momento, é necessário receber um objeto pronto do respectivo tipo.",
    "tags": [],
    "title": "Impressão",
    "uri": "/functions/print.html"
  },
  {
    "breadcrumb": "Zoop SmartPOS Plugin",
    "content": "Capítulo 7 Remoção do Aplicativo da Zoop da GPOS720 Este tutorial orienta como remover o aplicativo da Zoop utilizando um pendrive USB-C ou através de um MDM (Mobile Device Management).\nAPK removedor do APP na SmartPOS GPOS720 Link para download do arquivo .zip Remoção via Pendrive USB-C 1. Preparar o Pendrive Obtenha um Pendrive USB-C: Certifique-se de que o pendrive é do tipo USB-C, compatível com as portas das máquinas onde o aplicativo será removido. 2. Limpar o Pendrive Conecte o pendrive ao seu computador. Abra o explorador de arquivos e localize o pendrive. Formate o pendrive, se necessário, para garantir que não haja arquivos indesejados. 3. Descompactar o Conteúdo no Pendrive Descompacte o Arquivo Comprimido: Baixe o arquivo comprimido que contém o script ou programa de remoção do aplicativo. Use um software de descompactação (como WinRAR ou 7-Zip) para extrair o conteúdo diretamente para o pendrive. Verifique se todos os arquivos necessários estão presentes no pendrive após a extração: enable_launcher_v3.0-signed_ProductionF.apk autoRun 4. Executar o Script de Remoção Conecte o Pendrive na Máquina de Destino: Insira o pendrive na porta USB-C da máquina onde o aplicativo será removido. Aguarde até que o script ou programa de remoção seja executado automaticamente. Confirme a Remoção: Siga as instruções na tela para confirmar a remoção do aplicativo. Após a remoção, o sistema pode solicitar que o pendrive seja desconectado. Demonstração de como ocorre a remoção via pendrive Seu navegador não suporta o elemento de vídeo. Informação Caso o vídeo não seja exibido corretamente, você pode baixá-lo pelo link.\nRemoção via MDM 1. Enviar o Executável de Remoção para as Máquinas Usar o MDM para Enviar o Executável: Acesse o painel de controle do seu MDM. Envie o arquivo enable_launcher_v3.0-signed_ProductionF.apk ou outro executável de remoção fornecido para as máquinas de destino usando a ferramenta de distribuição de software do MDM. 2. Executar o Script de Remoção Executar o Processo de Remoção: Após o envio do executável para as máquinas, configure o MDM para iniciar a execução automaticamente ou instrua os usuários a realizarem a remoção manualmente. Certifique-se de que o processo de remoção seja concluído em todas as máquinas designadas.",
    "description": "Capítulo 7 Remoção do Aplicativo da Zoop da GPOS720 Este tutorial orienta como remover o aplicativo da Zoop utilizando um pendrive USB-C ou através de um MDM (Mobile Device Management).\nAPK removedor do APP na SmartPOS GPOS720 Link para download do arquivo .zip Remoção via Pendrive USB-C 1. Preparar o Pendrive Obtenha um Pendrive USB-C: Certifique-se de que o pendrive é do tipo USB-C, compatível com as portas das máquinas onde o aplicativo será removido. 2. Limpar o Pendrive Conecte o pendrive ao seu computador. Abra o explorador de arquivos e localize o pendrive. Formate o pendrive, se necessário, para garantir que não haja arquivos indesejados. 3. Descompactar o Conteúdo no Pendrive Descompacte o Arquivo Comprimido: Baixe o arquivo comprimido que contém o script ou programa de remoção do aplicativo. Use um software de descompactação (como WinRAR ou 7-Zip) para extrair o conteúdo diretamente para o pendrive. Verifique se todos os arquivos necessários estão presentes no pendrive após a extração: enable_launcher_v3.0-signed_ProductionF.apk autoRun 4. Executar o Script de Remoção Conecte o Pendrive na Máquina de Destino: Insira o pendrive na porta USB-C da máquina onde o aplicativo será removido. Aguarde até que o script ou programa de remoção seja executado automaticamente. Confirme a Remoção: Siga as instruções na tela para confirmar a remoção do aplicativo. Após a remoção, o sistema pode solicitar que o pendrive seja desconectado. Demonstração de como ocorre a remoção via pendrive Seu navegador não suporta o elemento de vídeo. Informação Caso o vídeo não seja exibido corretamente, você pode baixá-lo pelo link.",
    "tags": [],
    "title": "Remove aplicativo GPOS720",
    "uri": "/removezoopapp.html"
  },
  {
    "breadcrumb": "Zoop SmartPOS Plugin",
    "content": "Capítulo 7 Releases 1.8.4-latest 1.8.3 1.8.2 1.7.2 1.7.1 1.6.4 1.6.3 1.6.2 1.6.1 1.6.0 1.5.1 1.5.0",
    "description": "Capítulo 7 Releases 1.8.4-latest 1.8.3 1.8.2 1.7.2 1.7.1 1.6.4 1.6.3 1.6.2 1.6.1 1.6.0 1.5.1 1.5.0",
    "tags": [],
    "title": "Releases",
    "uri": "/releases.html"
  },
  {
    "breadcrumb": "Zoop SmartPOS Plugin \u003e Funcionalidades",
    "content": "Consultar chave Faz-se uso da classe SmartPOSZoopKeyValidationRequestBuilder. Observações Não é necessário ter inicializado o plugin previamente Caso o dispositivo não possua a chave, é necessário envio do terminal à fabricante(Pax) para gravação de chave. Exemplo val request = SmartPOSPlugin.createZoopKeyValidationRequestBuilder() .callback(object: Callback\u003cSmartPOSZoopKeyValidationResponse\u003e() { override fun onSuccess(response: SmartPOSZoopKeyValidationResponse) { if (response.hasKey) { handleTerminalHasTransactionKey() } else { // terminal doesn't have transactional key } } override fun onFail(error: Throwable){ // terminal doesn't have transactional key } }) .build() Zoop.post(request)",
    "description": "Consultar chave Faz-se uso da classe SmartPOSZoopKeyValidationRequestBuilder. Observações Não é necessário ter inicializado o plugin previamente Caso o dispositivo não possua a chave, é necessário envio do terminal à fabricante(Pax) para gravação de chave. Exemplo val request = SmartPOSPlugin.createZoopKeyValidationRequestBuilder() .callback(object: Callback\u003cSmartPOSZoopKeyValidationResponse\u003e() { override fun onSuccess(response: SmartPOSZoopKeyValidationResponse) { if (response.hasKey) { handleTerminalHasTransactionKey() } else { // terminal doesn't have transactional key } } override fun onFail(error: Throwable){ // terminal doesn't have transactional key } }) .build() Zoop.post(request)",
    "tags": [],
    "title": "Consultar chave transacional",
    "uri": "/functions/check_zoop_key.html"
  },
  {
    "breadcrumb": "Zoop SmartPOS Plugin \u003e Funcionalidades",
    "content": "Forçar carga de tabelas Faz-se uso da classe SmartPOSTableLoadRequestBuilder. Observações Esta funcionalidade não é mandatória, visto que durante a transação, caso seja necessário, o dispositivo realizará a carga de tabelas, esta funcionalidade é apenas para forçar uma carga, sem prosseguir um fluxo de venda. Exemplo val request = SmartPOSPlugin.createTableLoadRequestBuilder() .callback(object : Callback\u003cSmartPOSTableLoadResponse\u003e() { override fun onFail(error: Throwable) { handleFailTableLoad(error) } override fun onSuccess(response: SmartPOSTableLoadResponse) { handleSuccessTableLoad(response) } }) .messageCallback(object : Callback\u003cMessageCallbackRequestField.MessageData\u003e() { override fun onFail(error: Throwable) { } override fun onSuccess(response: MessageCallbackRequestField.MessageData) { displayUserMessage(response.message) } }).build() Zoop.post(request)",
    "description": "Forçar carga de tabelas Faz-se uso da classe SmartPOSTableLoadRequestBuilder. Observações Esta funcionalidade não é mandatória, visto que durante a transação, caso seja necessário, o dispositivo realizará a carga de tabelas, esta funcionalidade é apenas para forçar uma carga, sem prosseguir um fluxo de venda. Exemplo val request = SmartPOSPlugin.createTableLoadRequestBuilder() .callback(object : Callback\u003cSmartPOSTableLoadResponse\u003e() { override fun onFail(error: Throwable) { handleFailTableLoad(error) } override fun onSuccess(response: SmartPOSTableLoadResponse) { handleSuccessTableLoad(response) } }) .messageCallback(object : Callback\u003cMessageCallbackRequestField.MessageData\u003e() { override fun onFail(error: Throwable) { } override fun onSuccess(response: MessageCallbackRequestField.MessageData) { displayUserMessage(response.message) } }).build() Zoop.post(request)",
    "tags": [],
    "title": "Atualizar carga de tabelas",
    "uri": "/functions/force_table_load.html"
  },
  {
    "breadcrumb": "Zoop SmartPOS Plugin \u003e Funcionalidades",
    "content": "Detecção de cartão Faz-se uso da classe SmartPOSCardDetectionRequestBuilder. Métodos disponíveis Cartão inserido Request para verificar que o cartão foi inserido. Uma vez que este request é realizado, roda uma tarefa em segundo plano consultando o momento que o cartão é inserido, sendo interrompido de duas maneiras: Sendo cancelado explicitamente request.cancel(). No momento que o cartão é inserido. Exemplo val request = SmartPOSPlugin.createCardDetectionRequestBuilder() .callback(object : Callback\u003cSmartPOSCardDetectionResponse\u003e() { override fun onSuccess(response: SmartPOSCardDetectionResponse) { if (response.cardWasDetected) { handleCardWasDetected() } } override fun onFail(error: Throwable) { } }) .build() Zoop.post(request!!) Cartão removido Request para verificar, ao fim de uma transação, que o cartão está inserido, e mandar remover, caso necessário. Uma vez que o cartão não esteja presente, será lançado o callback onComplete. Uma vez que este request é realizado, roda uma tarefa em segundo plano consultando o momento que o cartão é removido, sendo interrompido de duas maneiras: Sendo cancelado explicitamente request.cancel(). No momento que o cartão é removido. obs.: Caso o cartão não esteja presente no momento do request, onComplete é retornado instantaneamente. Exemplo val request = SmartPOSPlugin.createCardDetectionRequestBuilder() .cardDetectionType(CardDetectionTypeRequestField.CardDetectionType.REMOVED) .callback(object : Callback\u003cSmartPOSCardDetectionResponse\u003e() { override fun onSuccess(response: SmartPOSCardDetectionResponse) { CoroutineScope(Dispatchers.Main).launch { if (response.cardWasDetected) { handleCardStillInserted() } } } override fun onFail(error: Throwable) { } override fun onComplete() { handleCardIsNotInserted() } }) .build() Zoop.post(request)",
    "description": "Detecção de cartão Faz-se uso da classe SmartPOSCardDetectionRequestBuilder. Métodos disponíveis Cartão inserido Request para verificar que o cartão foi inserido. Uma vez que este request é realizado, roda uma tarefa em segundo plano consultando o momento que o cartão é inserido, sendo interrompido de duas maneiras: Sendo cancelado explicitamente request.cancel(). No momento que o cartão é inserido. Exemplo val request = SmartPOSPlugin.createCardDetectionRequestBuilder() .callback(object : Callback\u003cSmartPOSCardDetectionResponse\u003e() { override fun onSuccess(response: SmartPOSCardDetectionResponse) { if (response.cardWasDetected) { handleCardWasDetected() } } override fun onFail(error: Throwable) { } }) .build() Zoop.post(request!!) Cartão removido Request para verificar, ao fim de uma transação, que o cartão está inserido, e mandar remover, caso necessário. Uma vez que o cartão não esteja presente, será lançado o callback onComplete. Uma vez que este request é realizado, roda uma tarefa em segundo plano consultando o momento que o cartão é removido, sendo interrompido de duas maneiras: Sendo cancelado explicitamente request.cancel(). No momento que o cartão é removido. obs.: Caso o cartão não esteja presente no momento do request, onComplete é retornado instantaneamente. Exemplo val request = SmartPOSPlugin.createCardDetectionRequestBuilder() .cardDetectionType(CardDetectionTypeRequestField.CardDetectionType.REMOVED) .callback(object : Callback\u003cSmartPOSCardDetectionResponse\u003e() { override fun onSuccess(response: SmartPOSCardDetectionResponse) { CoroutineScope(Dispatchers.Main).launch { if (response.cardWasDetected) { handleCardStillInserted() } } } override fun onFail(error: Throwable) { } override fun onComplete() { handleCardIsNotInserted() } }) .build() Zoop.post(request)",
    "tags": [],
    "title": "Detecção de cartão",
    "uri": "/functions/card_detector.html"
  },
  {
    "breadcrumb": "Zoop SmartPOS Plugin \u003e Funcionalidades",
    "content": "Relatórios Faz-se uso da classe ReportRequestBuilder. Informação Os dados de transações/relatórios duram no banco de dados por 90 dias.\nRelatórios Consolidado Detalhado Turnos Filtros Os relatórios consolidado e detalhado podem ser gerados utilizando um intervalo customizado, ou um padrão do tipo hoje, ontem ou anteontem. Exemplos: Para gerar um relatório de intervalo fixo:\n/* Hoje -\u003e */ ReportFilter(threshold = ReportThreshold.TODAY) /* Ontem -\u003e */ ReportFilter(threshold = ReportThreshold.YESTERDAY) /* Anteontem -\u003e */ ReportFilter(threshold = ReportThreshold.DAY_BEFORE_YESTERDAY) Para gerar um relatório customizado, é preciso passar os parâmetros de data e hora de início/fim, além do tipo, conforme abaixo:\nReportFilter( threshold = ReportThreshold.CUSTOM, fromDate = DateParameters(18, 05, 2023), fromTime = TimeParameters(0, 0), toDate = DateParameters(20, 05, 2023), toTime = TimeParameters(23, 59) ) data class DateParameters( val day: Int, val month: Int, val year: Int ) data class TimeParameters( val hour: Int, val minute: Int ) // Este exemplo representa um intervalo do início do dia 18/05/2023 até o fim do dia 20/05/2023 Retornos Este request retorna uma data class chamada ReportData, que pode conter um relatório consolidado, detalhado, ou de turno.\ndata class ReportData( val consolidatedReportData: ConsolidatedReportData? = null, val detailedReportData: DetailedReportData? = null, val closedShiftsReportData: ClosedShiftsReportData? = null )",
    "description": "Relatórios Faz-se uso da classe ReportRequestBuilder. Informação Os dados de transações/relatórios duram no banco de dados por 90 dias.\nRelatórios Consolidado Detalhado Turnos Filtros Os relatórios consolidado e detalhado podem ser gerados utilizando um intervalo customizado, ou um padrão do tipo hoje, ontem ou anteontem. Exemplos: Para gerar um relatório de intervalo fixo:\n/* Hoje -\u003e */ ReportFilter(threshold = ReportThreshold.TODAY) /* Ontem -\u003e */ ReportFilter(threshold = ReportThreshold.YESTERDAY) /* Anteontem -\u003e */ ReportFilter(threshold = ReportThreshold.DAY_BEFORE_YESTERDAY) Para gerar um relatório customizado, é preciso passar os parâmetros de data e hora de início/fim, além do tipo, conforme abaixo:",
    "tags": [],
    "title": "Relatórios",
    "uri": "/functions/reports.html"
  },
  {
    "breadcrumb": "Zoop SmartPOS Plugin \u003e Funcionalidades",
    "content": "Visualizar último recibo Faz-se uso da classe ReprintRequestBuilder. Este request retorna a ultima transação realizada, com o objeto do tipo TransactionData. Dica Você pode imprimir a via passando o objeto retornado para o request de impressão\nExemplo SmartPOSPlugin.createLastReceiptRequestBuilder() .callback(object : Callback\u003cLastReceiptResponse\u003e() { override fun onFail(error: Throwable) { // Recibo não encontrado } override fun onSuccess(response: LastReceiptResponse) { val transactionData = response.transaction } }).build().run(Zoop::post) Retorno TransactionData( val value: Int?, // Valor da transação em centavos val paymentType: Int?, // Tipo de pagamento val installments: Int?, // Parcelas val status: String?, // Status (approved/canceled) val brand: String?, // Marca do cartão ex: Visa val address: String?, // Endereço do seller val sellerName: String?, // Nome do seller val acquiring: String?, // Adquirente val pan: String?, // PAN do cartão val autoCode: String?, // Código de autorização val documentType: String?, // Tipo de documento, CPF/CNPJ val document: String?, // Documento val nsu: String?, // NSU val date: String?, // Data da transação val hour: String?, // Hora da transação val cv: String?, // CV val arqc: String?, // ARQC val aid: String?, // AID val sellerReceipt: String?, // Recibo do estabelecimento val customerReceipt: String?, // Recibo do cliente val approvalMessage: String?, // Mensagem de aprovação ex: APROVADA PELO EMISSOR val aidLabel: String?, // Label do cartão var transactionId: String?, // Id da transação val receiptId: String? = null, // Id do recibo, caso aplicável (hoje, apenas transações Pix) val pixId: String? = null, // Id do Pix val cardFingerprint: String? = null // Token único do cartão. ) // No caso de uma transação Pix, ambos campos transactionId e pixId, sendo pixId um identificador interno da zoop.",
    "description": "Visualizar último recibo Faz-se uso da classe ReprintRequestBuilder. Este request retorna a ultima transação realizada, com o objeto do tipo TransactionData. Dica Você pode imprimir a via passando o objeto retornado para o request de impressão\nExemplo SmartPOSPlugin.createLastReceiptRequestBuilder() .callback(object : Callback\u003cLastReceiptResponse\u003e() { override fun onFail(error: Throwable) { // Recibo não encontrado } override fun onSuccess(response: LastReceiptResponse) { val transactionData = response.transaction } }).build().run(Zoop::post) Retorno TransactionData( val value: Int?, // Valor da transação em centavos val paymentType: Int?, // Tipo de pagamento val installments: Int?, // Parcelas val status: String?, // Status (approved/canceled) val brand: String?, // Marca do cartão ex: Visa val address: String?, // Endereço do seller val sellerName: String?, // Nome do seller val acquiring: String?, // Adquirente val pan: String?, // PAN do cartão val autoCode: String?, // Código de autorização val documentType: String?, // Tipo de documento, CPF/CNPJ val document: String?, // Documento val nsu: String?, // NSU val date: String?, // Data da transação val hour: String?, // Hora da transação val cv: String?, // CV val arqc: String?, // ARQC val aid: String?, // AID val sellerReceipt: String?, // Recibo do estabelecimento val customerReceipt: String?, // Recibo do cliente val approvalMessage: String?, // Mensagem de aprovação ex: APROVADA PELO EMISSOR val aidLabel: String?, // Label do cartão var transactionId: String?, // Id da transação val receiptId: String? = null, // Id do recibo, caso aplicável (hoje, apenas transações Pix) val pixId: String? = null, // Id do Pix val cardFingerprint: String? = null // Token único do cartão. ) // No caso de uma transação Pix, ambos campos transactionId e pixId, sendo pixId um identificador interno da zoop.",
    "tags": [],
    "title": "Visualizar último recibo",
    "uri": "/functions/last_receipt.html"
  },
  {
    "breadcrumb": "Zoop SmartPOS Plugin \u003e Funcionalidades",
    "content": "Token único por cartão Faz-se uso da classe SmartPOSCardFingerprintRequestBuilder. Este request retorna um identificador único do cartão criptografado (hash). Dica Esta requisição não tem aplicação prática para o fluxo transacional, sendo apenas uma ferramenta caso a sua aplicação faça alguma métrica baseada em cliente. O mesmo dado é retornado ao fim de uma transação no objeto TransactionData\nExemplo SmartPOSPlugin.createCardFingerprintRequestBuilder() .callback(object : Callback\u003cSmartPOSCardFingerprintResponse\u003e() { override fun onFail(error: Throwable) { // Falha ao solicitar o dado } override fun onSuccess(response: SmartPOSCardFingerprintResponse) { response.fingerprint // token } }) .messageCallback(object : Callback\u003cMessageCallbackRequestField.MessageData\u003e() { override fun onFail(error: Throwable) { // Falha no fluxo de mensagens } override fun onSuccess(response: MessageCallbackRequestField.MessageData) { response.message // pode ser uma mensagem solicitando a inserção do cartão } }) .build().run(Zoop::post) Retorno /** * Classe responsável pela resposta de fingerprint do cartão. * @since v1.6.0 * @param fingerprint Fingerprint do cartão. * @param cardBrand Bandeira do cartão (pode ser inconsistente caso não identificado corretamente no bin). */ data class SmartPOSCardFingerprintResponse(val fingerprint: String, val cardBrand: CardBrand? = null)",
    "description": "Token único por cartão Faz-se uso da classe SmartPOSCardFingerprintRequestBuilder. Este request retorna um identificador único do cartão criptografado (hash). Dica Esta requisição não tem aplicação prática para o fluxo transacional, sendo apenas uma ferramenta caso a sua aplicação faça alguma métrica baseada em cliente. O mesmo dado é retornado ao fim de uma transação no objeto TransactionData\nExemplo SmartPOSPlugin.createCardFingerprintRequestBuilder() .callback(object : Callback\u003cSmartPOSCardFingerprintResponse\u003e() { override fun onFail(error: Throwable) { // Falha ao solicitar o dado } override fun onSuccess(response: SmartPOSCardFingerprintResponse) { response.fingerprint // token } }) .messageCallback(object : Callback\u003cMessageCallbackRequestField.MessageData\u003e() { override fun onFail(error: Throwable) { // Falha no fluxo de mensagens } override fun onSuccess(response: MessageCallbackRequestField.MessageData) { response.message // pode ser uma mensagem solicitando a inserção do cartão } }) .build().run(Zoop::post) Retorno /** * Classe responsável pela resposta de fingerprint do cartão. * @since v1.6.0 * @param fingerprint Fingerprint do cartão. * @param cardBrand Bandeira do cartão (pode ser inconsistente caso não identificado corretamente no bin). */ data class SmartPOSCardFingerprintResponse(val fingerprint: String, val cardBrand: CardBrand? = null)",
    "tags": [],
    "title": "Token único por cartão",
    "uri": "/functions/card_fingerprint.html"
  },
  {
    "breadcrumb": "",
    "content": "Zoop SmartPOS Plugin O Plugin SmartPOS é responsável por consumir serviços de pagamento e cancelamento, além de diversas outras funcionalidades conforme listado abaixo.\nPrimeiros passos Onboarding Requisitos Downloads Configuração Principais funcionalidades Inicialização Ativação Pagamento via cartão Pagamento via Pix Cancelamento Impressão Consultar chave transacional Atualizar carga de tabelas Detecção de cartão Relatórios Visualizar último recibo Token único por cartão",
    "description": "Zoop SmartPOS Plugin O Plugin SmartPOS é responsável por consumir serviços de pagamento e cancelamento, além de diversas outras funcionalidades conforme listado abaixo.\nPrimeiros passos Onboarding Requisitos Downloads Configuração Principais funcionalidades Inicialização Ativação Pagamento via cartão Pagamento via Pix Cancelamento Impressão Consultar chave transacional Atualizar carga de tabelas Detecção de cartão Relatórios Visualizar último recibo Token único por cartão",
    "tags": [],
    "title": "Zoop SmartPOS Plugin",
    "uri": "/index.html"
  },
  {
    "breadcrumb": "Zoop SmartPOS Plugin",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Categorias",
    "uri": "/categories.html"
  },
  {
    "breadcrumb": "Zoop SmartPOS Plugin",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Etiquetas",
    "uri": "/tags.html"
  }
]
