<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Funcionalidades - Plugin SmartPOS</title>
    <link>//localhost:1313/functions.html</link>
    <description>Capítulo 5 Funcionalidades Para realizar requests, selecione o serviço desejado. Inicialização Ativação Pagamento via cartão Pagamento via Pix Cancelamento Impressão Consultar chave transacional Atualizar carga de tabelas Detecção de cartão Relatórios Visualizar último recibo Token único por cartão</description>
    <generator>Hugo</generator>
    <language>pt</language>
    <lastBuildDate>Mon, 01 Jan 0001 00:00:00 +0000</lastBuildDate>
    <atom:link href="//localhost:1313/functions/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Ativação</title>
      <link>//localhost:1313/functions/activation.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/functions/activation.html</guid>
      <description>Ativação É necessário inicializar o SDK sem passar as credenciais, afim de realizar a requisição para recuperar as credenciais. Zoop.Initialize(context) Neste momento, é necessário injetar o plugin do smartPOS, conforme abaixo: val smartPOSPlugin = Zoop.make&lt;SmartPOSPlugin&gt;() Zoop.plug(smartPOSPlugin) Com o sdk inicializado, é necessário fazer uma ativação pelo seu dashboard para recuperar as credenciais*, utilizando um token gerado com a requisição de ativação, conforme exemplo a seguir. Dica Cada dispositivo só precisa fazer essa ativação uma única vez afim de criar o dispositivo na nossa base de dados, associando o dispositivo ao estabelecimento, após isso, é possível inicializar o plugin diretamente com as credenciais recebidas.</description>
    </item>
    <item>
      <title>Inicialização</title>
      <link>//localhost:1313/functions/plug.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/functions/plug.html</guid>
      <description>Inicialização Para utilizar o plugin, é necessário inicializar o SDK. Dica É necessário ativar o dispositivo conforme descrito aqui.&#xA;Exemplo após ativação Zoop.Initialize(context) { credentials { marketplace = &#34;{marketplace id}&#34; seller = &#34;{seller id}&#34; accessKey = &#34;{chave de acesso}&#34; } } Dados de ativação marketplace: marketplace salvo durante a ativação via dashboard.&#xA;seller: seller salvo durante a ativação via dashboard.&#xA;accessKey: accessKey salvo durante a ativação via dashboard.</description>
    </item>
    <item>
      <title>Pagamento via cartão</title>
      <link>//localhost:1313/functions/card_payment.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/functions/card_payment.html</guid>
      <description>Venda Dica É recomendado que você faça uma consulta de chave transacional na inicialização do plugin, caso a chave não exista no terminal, este deverá ser enviado para o fabricante(Pax), para correção. A ausência da chave impede a transação e não há correção do lado da Zoop.&#xA;Faz-se uso da classe SmartPOSPaymentRequestBuilder. Input de senha No input de senha, a PAX configura o teclado como embaralhado por padrão. Para ter o teclado exibido corretamente, é necessário adicionar ao arquivo config.xml (ou criar, caso não exista), dentro de res/values/, alguns parâmetros, conforme abaixo: &lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt; &lt;resources&gt; &lt;bool name=&#34;keyboard_random&#34;&gt;false&lt;/bool&gt; &lt;bool name=&#34;show_input_box&#34;&gt;false&lt;/bool&gt; &lt;/resources&gt; Exemplo de Pagamento val paymentRequest = SmartPOSPlugin.createPaymentRequestBuilder() .amount(1000) .option(Option.CREDIT) .installments(2) //.autoPrintEstablishmentReceipt(false) Para desabilitar a impressão automática. //.referenceId(&#34;&#34;) Identificador próprio (opcional) //.metadata(buildJsonObject {}) Metadados adicionais (opcional) .callback(object: Callback&lt;SmartPOSPaymentResponse&gt;() { override fun onStart() { startLoadingAnimation() } override fun onSuccess(response: SmartPOSPaymentResponse) { handleSucessfullPayment(response) } override fun onFail(exception: Throwable) { handlePaymentFailure(exception) } override fun onComplete() { stopLoadingAnimation() } }) .messageCallback(object: Callback&lt;MessageCallbackRequestField.MessageData&gt;() { override fun onSuccess(messageData: MessageCallbackRequestField.MessageData) { displayUserMessage(messageData.message) } override fun onFail(exception: Throwable) { } }) .pinCallback(object: Callback&lt;PinCallbackRequestField.PinData&gt;() { override fun onSuccess(pinData: PinCallbackRequestField.PinData) { val eventType = pinData.getType(); when (eventType) { Terminal.PinEventHandler.EventType.Start -&gt; creatViewToDisplayPasswordInput() Terminal.PinEventHandler.EventType.Finish -&gt; finishPasswordInput() Terminal.PinEventHandler.EventType.Inserted -&gt; handlePasswordCaracterInput() Terminal.PinEventHandler.EventType.Removed -&gt; handlePasswordCaracterRemoved() else -&gt; handlePasswordCaracterCleared() } } override fun onFail(exception: Throwable) { } }) .menuSelectionCallback(object: Callback&lt;SmartPOSMenuOptions&gt;() { override fun onFail(error: Throwable) { } override fun onSuccess(response: SmartPOSMenuOptions) { assembleOptionsList(response.options.iterable) } override fun onFail(error: Throwable) { } }) .userInputCallback(object : Callback&lt;UserInput&gt;() { override fun onSuccess(response: UserInput) { when (response.type) { UserInputType.CVV -&gt; { requestCvv() } } } override fun onFail(error: Throwable) { } }) .build() Zoop.post(paymentRequest) Parâmetros de entrada Chave Tipo Objetivo Exemplo amount Long Valor da transação (em centavos). 2 (R$ 0,02) option Option Opção do pagamento (do tipo Option). Option.CREDIT installments Long Quantidade de parcelas. 2 autoPrintEstablishmentReceipt Boolean Imprimir ou não a via do estabelecimento automaticamente. true referenceId String Identificador próprio gerado pelo parceiro (opcional, máx. 50 caracteres) &#34;237ab31-g99c-4e25-9hjs-32u4d3gf7fh2&#34; metadata String (em JSON) ou JsonObject Metadados personalizados fornecidos pelo parceiro (opcional, máx. 512 caracteres). &#34;{\&#34;parcelado\&#34;:false,\&#34;tentativa\&#34;:1,\&#34;vencimento\&#34;:\&#34;2024-02-15\&#34;,\&#34;versao\&#34;:\&#34;1.23.4\&#34;}&#34; Opções de pagamento Option { CREDIT, // Crédito à vista CREDIT_WITH_INSTALLMENTS, // Crédito parcelado DEBIT // Débito } Metadados em JsonObject Para criar um objeto de JsonObject, faça como no seguinte exemplo:</description>
    </item>
    <item>
      <title>Pagamento via Pix</title>
      <link>//localhost:1313/functions/pix_payment.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/functions/pix_payment.html</guid>
      <description>Pix Faz-se uso da classe SmartPOSPixPaymentRequestBuilder. Exemplo de Pix val pixRequest = SmartPOSPlugin.createPixPaymentRequestBuilder() .amount(1000) //.referenceId(&#34;&#34;) Identificador próprio (opcional) //.metadata(buildJsonObject {}) Metadados adicionais (opcional) .callback(object: Callback&lt;SmartPOSPixPaymentResponse&gt;(){ override fun onSuccess(response: SmartPOSPixPaymentResponse) { handleSucessfullPayment(response) } override fun onFail(throwable: Throwable) { handlePaymentFailure(exception) } }) .qrCodeCallback(object: Callback&lt;QRCodeCallbackRequestField.QRCodeData&gt;() { override fun onSuccess(qrCodeData: QRCodeCallbackRequestField.QRCodeData) { showQRCode(qrCodeData.getData()); } override fun onFail(throwable: Throwable) { handleQrCodeFailure(throwable) } }) .transactionIdCallback(object: Callback&lt;TransactionIdCallbackRequestField.transactionIdData&gt;() { override fun onSuccess(transactionId: TransactionIdCallbackRequestField.transactionIdData) { storeTransactionId(transactionId.data) } override fun onFail(throwable: Throwable) { handleTransactionIdFailure(throwable) } }) .messageCallback(object: Callback&lt;MessageCallbackRequestField.MessageData&gt;() { override fun onSuccess(messageData: MessageCallbackRequestField.MessageData) { displayMessage() } override fun onFail(throwable: Throwable) { } }) .build() Zoop.post(request) Parâmetros de entrada Chave Tipo Objetivo Exemplo amount Long Valor da transação (em centavos). 2 (R$ 0,02) referenceId String Identificador próprio gerado pelo parceiro (opcional, máx. 50 caracteres) &#34;237ab31-g99c-4e25-9hjs-32u4d3gf7fh2&#34; metadata String (em JSON) ou JsonObject Metadados personalizados fornecidos pelo parceiro (opcional, máx. 512 caracteres). &#34;{\&#34;parcelado\&#34;:false,\&#34;tentativa\&#34;:1,\&#34;vencimento\&#34;:\&#34;2024-02-15\&#34;,\&#34;versao\&#34;:\&#34;1.23.4\&#34;}&#34; Metadados em JsonObject Para criar um objeto de JsonObject, faça como no seguinte exemplo:</description>
    </item>
    <item>
      <title>Cancelamento</title>
      <link>//localhost:1313/functions/cancel_payment.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/functions/cancel_payment.html</guid>
      <description>Cancelamento Faz-se uso da classe SmartPOSVoidRequestBuilder. Exemplo de Cancelamento val voidRequest = SmartPOSPlugin.createVoidRequestBuilder() .callback(object: Callback&lt;SmartPOSVoidResponse&gt;() { override fun onStart() { startLoadingAnimation() } override fun onSuccess(response: SmartPOSVoidResponse) { handleSucessfullVoid(response) } override fun onFail(exception: Throwable) { handleVoidFailure(exception) } override fun onComplete() { stopLoadingAnimation() } }) .voidTransactionCallback(object: Callback&lt;VoidTransaction&gt;() { override fun onSuccess(response: VoidTransaction) { assembleList(response) } override fun onFail(exception: Throwable) { } }) .messageCallback(object: Callback&lt;MessageCallbackRequestField.MessageData&gt;() { override fun onSuccess(messageData: MessageCallbackRequestField.MessageData) { displayMessage() } override fun onFail(throwable: Throwable) { } }) .menuSelectionCallback(object: Callback&lt;SmartPOSMenuOptions&gt;() { override fun onSuccess(response: SmartPOSMenuOptions) { assembleOptionsList(response.options.iterable) } override fun onFail(error: Throwable) { } }) .build() Zoop.post(voidRequest) Callbacks .callback Responsável pelo fluxo do cancelamento, início, processamento, conclusão (sucesso/falha). onStart -&gt; Esta callback é sinalizada quando o fluxo do cancelamento começa, podendo ser sinalizado pela aplicação o início do processamento. OnSuccess -&gt; Neste momento, a transação foi cancelada, e você recebe o objeto SmartPOSVoidResponsecontendo um *TransactionData, contendo todos os dados da transação. Para utilizar o request de impressão, será necessário passar este objeto para o request de impressão OnFail -&gt; Falha no cancelamento, é recebido um exception, podendo ser do tipo: - ZoopPaymentException -&gt; Falha no fluxo do pagamento, neste caso, passamos a mensagem de erro, podendo ser acessada como exception.message - ZoopTimeoutException -&gt; Tempo excedido na operação - ZoopClosedConnectionException -&gt; Conexão interrompida - ZoopNetworkException -&gt; Falha de conexão OnComplete -&gt; Sinaliza o final do fluxo do cancelamento, tanto em casos de sucesso/falha.</description>
    </item>
    <item>
      <title>Impressão</title>
      <link>//localhost:1313/functions/print.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/functions/print.html</guid>
      <description>Impressão Faz-se uso da classe SmartPOSPrinterRequestBuilder. Aviso Este SDK não tem suporte para criação de recibo de pagamento customizado. Caso o integrador queira fazer uso da impressora nesse formato, deve-se utilizar a API do fabricante com suporte do mesmo.&#xA;Observações O plugin é capaz de imprimir recibos do tipo:&#xA;ReceiptType { ESTABLISHMENT, // Via estabelecimento CUSTOMER, // Via cliente REPRINT_ESTABLISHMENT, // Reimpressão de via do estabelecimento REPRINT_CUSTOMER, // Reimpressão de via do cliente DETAILED_REPORT, // Relatório detalhado¹ CONSOLIDATED_REPORT, // Relatório consolidado¹ SHIFT_REPORT // Relatório de fechamento de turno¹ } ¹ Para esses fluxos, nesse momento, é necessário receber um objeto pronto do respectivo tipo.</description>
    </item>
    <item>
      <title>Consultar chave transacional</title>
      <link>//localhost:1313/functions/check_zoop_key.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/functions/check_zoop_key.html</guid>
      <description>Consultar chave Faz-se uso da classe SmartPOSZoopKeyValidationRequestBuilder. Observações Não é necessário ter inicializado o plugin previamente Caso o dispositivo não possua a chave, é necessário envio do terminal à fabricante(Pax) para gravação de chave. Exemplo val request = SmartPOSPlugin.createZoopKeyValidationRequestBuilder() .callback(object: Callback&lt;SmartPOSZoopKeyValidationResponse&gt;() { override fun onSuccess(response: SmartPOSZoopKeyValidationResponse) { if (response.hasKey) { handleTerminalHasTransactionKey() } else { // terminal doesn&#39;t have transactional key } } override fun onFail(error: Throwable){ // terminal doesn&#39;t have transactional key } }) .build() Zoop.post(request)</description>
    </item>
    <item>
      <title>Atualizar carga de tabelas</title>
      <link>//localhost:1313/functions/force_table_load.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/functions/force_table_load.html</guid>
      <description>Forçar carga de tabelas Faz-se uso da classe SmartPOSTableLoadRequestBuilder. Observações Esta funcionalidade não é mandatória, visto que durante a transação, caso seja necessário, o dispositivo realizará a carga de tabelas, esta funcionalidade é apenas para forçar uma carga, sem prosseguir um fluxo de venda. Exemplo val request = SmartPOSPlugin.createTableLoadRequestBuilder() .callback(object : Callback&lt;SmartPOSTableLoadResponse&gt;() { override fun onFail(error: Throwable) { handleFailTableLoad(error) } override fun onSuccess(response: SmartPOSTableLoadResponse) { handleSuccessTableLoad(response) } }) .messageCallback(object : Callback&lt;MessageCallbackRequestField.MessageData&gt;() { override fun onFail(error: Throwable) { } override fun onSuccess(response: MessageCallbackRequestField.MessageData) { displayUserMessage(response.message) } }).build() Zoop.post(request)</description>
    </item>
    <item>
      <title>Detecção de cartão</title>
      <link>//localhost:1313/functions/card_detector.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/functions/card_detector.html</guid>
      <description>Detecção de cartão Faz-se uso da classe SmartPOSCardDetectionRequestBuilder. Métodos disponíveis Cartão inserido Request para verificar que o cartão foi inserido. Uma vez que este request é realizado, roda uma tarefa em segundo plano consultando o momento que o cartão é inserido, sendo interrompido de duas maneiras: Sendo cancelado explicitamente request.cancel(). No momento que o cartão é inserido. Exemplo val request = SmartPOSPlugin.createCardDetectionRequestBuilder() .callback(object : Callback&lt;SmartPOSCardDetectionResponse&gt;() { override fun onSuccess(response: SmartPOSCardDetectionResponse) { if (response.cardWasDetected) { handleCardWasDetected() } } override fun onFail(error: Throwable) { } }) .build() Zoop.post(request!!) Cartão removido Request para verificar, ao fim de uma transação, que o cartão está inserido, e mandar remover, caso necessário. Uma vez que o cartão não esteja presente, será lançado o callback onComplete. Uma vez que este request é realizado, roda uma tarefa em segundo plano consultando o momento que o cartão é removido, sendo interrompido de duas maneiras: Sendo cancelado explicitamente request.cancel(). No momento que o cartão é removido. obs.: Caso o cartão não esteja presente no momento do request, onComplete é retornado instantaneamente. Exemplo val request = SmartPOSPlugin.createCardDetectionRequestBuilder() .cardDetectionType(CardDetectionTypeRequestField.CardDetectionType.REMOVED) .callback(object : Callback&lt;SmartPOSCardDetectionResponse&gt;() { override fun onSuccess(response: SmartPOSCardDetectionResponse) { CoroutineScope(Dispatchers.Main).launch { if (response.cardWasDetected) { handleCardStillInserted() } } } override fun onFail(error: Throwable) { } override fun onComplete() { handleCardIsNotInserted() } }) .build() Zoop.post(request)</description>
    </item>
    <item>
      <title>Relatórios</title>
      <link>//localhost:1313/functions/reports.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/functions/reports.html</guid>
      <description>Relatórios Faz-se uso da classe ReportRequestBuilder. Informação Os dados de transações/relatórios duram no banco de dados por 90 dias.&#xA;Relatórios Consolidado Detalhado Turnos Filtros Os relatórios consolidado e detalhado podem ser gerados utilizando um intervalo customizado, ou um padrão do tipo hoje, ontem ou anteontem. Exemplos: Para gerar um relatório de intervalo fixo:&#xA;/* Hoje -&gt; */ ReportFilter(threshold = ReportThreshold.TODAY) /* Ontem -&gt; */ ReportFilter(threshold = ReportThreshold.YESTERDAY) /* Anteontem -&gt; */ ReportFilter(threshold = ReportThreshold.DAY_BEFORE_YESTERDAY) Para gerar um relatório customizado, é preciso passar os parâmetros de data e hora de início/fim, além do tipo, conforme abaixo:</description>
    </item>
    <item>
      <title>Visualizar último recibo</title>
      <link>//localhost:1313/functions/last_receipt.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/functions/last_receipt.html</guid>
      <description>Visualizar último recibo Faz-se uso da classe ReprintRequestBuilder. Este request retorna a ultima transação realizada, com o objeto do tipo TransactionData. Dica Você pode imprimir a via passando o objeto retornado para o request de impressão&#xA;Exemplo SmartPOSPlugin.createLastReceiptRequestBuilder() .callback(object : Callback&lt;LastReceiptResponse&gt;() { override fun onFail(error: Throwable) { // Recibo não encontrado } override fun onSuccess(response: LastReceiptResponse) { val transactionData = response.transaction } }).build().run(Zoop::post) Retorno TransactionData( val value: Int?, // Valor da transação em centavos val paymentType: Int?, // Tipo de pagamento val installments: Int?, // Parcelas val status: String?, // Status (approved/canceled) val brand: String?, // Marca do cartão ex: Visa val address: String?, // Endereço do seller val sellerName: String?, // Nome do seller val acquiring: String?, // Adquirente val pan: String?, // PAN do cartão val autoCode: String?, // Código de autorização val documentType: String?, // Tipo de documento, CPF/CNPJ val document: String?, // Documento val nsu: String?, // NSU val date: String?, // Data da transação val hour: String?, // Hora da transação val cv: String?, // CV val arqc: String?, // ARQC val aid: String?, // AID val sellerReceipt: String?, // Recibo do estabelecimento val customerReceipt: String?, // Recibo do cliente val approvalMessage: String?, // Mensagem de aprovação ex: APROVADA PELO EMISSOR val aidLabel: String?, // Label do cartão var transactionId: String?, // Id da transação val receiptId: String? = null, // Id do recibo, caso aplicável (hoje, apenas transações Pix) val pixId: String? = null, // Id do Pix val cardFingerprint: String? = null // Token único do cartão. ) // No caso de uma transação Pix, ambos campos transactionId e pixId, sendo pixId um identificador interno da zoop.</description>
    </item>
    <item>
      <title>Token único por cartão</title>
      <link>//localhost:1313/functions/card_fingerprint.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/functions/card_fingerprint.html</guid>
      <description>Token único por cartão Faz-se uso da classe SmartPOSCardFingerprintRequestBuilder. Este request retorna um identificador único do cartão criptografado (hash). Dica Esta requisição não tem aplicação prática para o fluxo transacional, sendo apenas uma ferramenta caso a sua aplicação faça alguma métrica baseada em cliente. O mesmo dado é retornado ao fim de uma transação no objeto TransactionData&#xA;Exemplo SmartPOSPlugin.createCardFingerprintRequestBuilder() .callback(object : Callback&lt;SmartPOSCardFingerprintResponse&gt;() { override fun onFail(error: Throwable) { // Falha ao solicitar o dado } override fun onSuccess(response: SmartPOSCardFingerprintResponse) { response.fingerprint // token } }) .messageCallback(object : Callback&lt;MessageCallbackRequestField.MessageData&gt;() { override fun onFail(error: Throwable) { // Falha no fluxo de mensagens } override fun onSuccess(response: MessageCallbackRequestField.MessageData) { response.message // pode ser uma mensagem solicitando a inserção do cartão } }) .build().run(Zoop::post) Retorno /** * Classe responsável pela resposta de fingerprint do cartão. * @since v1.6.0 * @param fingerprint Fingerprint do cartão. * @param cardBrand Bandeira do cartão (pode ser inconsistente caso não identificado corretamente no bin). */ data class SmartPOSCardFingerprintResponse(val fingerprint: String, val cardBrand: CardBrand? = null)</description>
    </item>
  </channel>
</rss>