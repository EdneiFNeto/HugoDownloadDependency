<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Consolidado - Plugin SmartPOS</title>
    <link>//localhost:1313/functions/reports/consolidated.html</link>
    <description>Relatório consolidado Request que recupera um relatório consolidado por tipo de pagamento e bandeira do cartão, em um intervalo de tempo pré definido. Dica Você pode imprimir a via passando o objeto retornado para o request de impressão&#xA;Parâmetros receiptType -&gt; Tipo de relatório, no caso do consolidado: ReceiptType.CONSOLIDATED_REPORT reportFilter -&gt; Filtro do relatório, utilizando a data class ReportFilter data class ReportFilter( val threshold: ReportThreshold? = null, val fromDate: DateParameters? = null, val fromTime: TimeParameters = TimeParameters(0, 0), val toDate: DateParameters? = null, val toTime: TimeParameters = TimeParameters(23, 59) ) enum class ReportThreshold { TODAY, YESTERDAY, DAY_BEFORE_YESTERDAY, CUSTOM } data class DateParameters( val day: Int, val month: Int, val year: Int ) data class TimeParameters( val hour: Int, val minute: Int ) Exemplo SmartPOSPlugin.createReportsRequestBuilder() .receiptType(ReceiptType.CONSOLIDATED_REPORT) .reportFilter(filter) .callback(object : Callback&lt;ReportResponse&gt;() { override fun onFail(error: Throwable) { // Erro processando relatório } override fun onSuccess(response: ReportResponse) { /* Relatório consolidado: */ val data = response.reportData.consolidatedReportData } }).build().run(Zoop::post) Retorno data class ConsolidatedReportData( val issueDate: String?, // Data de emissão do relatório val sellerName: String?, // Nome do seller val documentType: String?, // Tipo de documento (&#34;CPF&#34; ou &#34;CNPJ&#34;) val document: String?, // Documento val serialNumber: String?, // Número de série do terminal val fromDate: String?, // Data de início do relatório val toDate: String?, // Data final do relatório val fromTime: String?, // Hora inicial do relatório val toTime: String?, // Hora final do relatório val transactionData: List&lt;ConsolidatedReportTransactionData&gt;?, // Lista de dados de transação conforme descrito abaixo val summary: ConsolidatedReportSummary? // Resumo do relatório consolidado conforme descrito abaixo ) data class ConsolidatedReportTransactionData( val brand: String?, // Bandeira do cartão val status: String?, // Status da transação (&#34;approved&#34; ou &#34;canceled&#34;) val paymentType: Int?, // Inteiro, seguindo a enum class Option, descrito abaixo val totalValue: Int?, // Valor total de vendas dessa bandeira/tipo de pagamento/status val totalTransactions: Int? // Quantidade de transações dessa bandeira/tipo de pagamento/status ) data class ConsolidatedReportSummary( val totalApproved: Int?, // Valor total aprovado val totalCanceled: Int?, // Valor total cancelado val totalTransactionsApproved: Int?, // Quantidade total de transações aprovadas val totalTransactionsCanceled: Int? // Quantidade total de transações canceladas ) enum class Option(val code: Int) { CREDIT(0), // Crédito DEBIT(1), // Débito CREDIT_WITH_INSTALLMENTS(2), // Crédito parcelado VOUCHER(3), // Voucher PIX(4), // Pix UNKNOWN(-1) // Desconhecido }</description>
    <generator>Hugo</generator>
    <language>pt</language>
    <atom:link href="//localhost:1313/functions/reports/consolidated/index.xml" rel="self" type="application/rss+xml" />
  </channel>
</rss>