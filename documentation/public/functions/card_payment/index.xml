<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pagamento via cartão - Plugin SmartPOS</title>
    <link>//localhost:1313/functions/card_payment.html</link>
    <description>Venda Dica É recomendado que você faça uma consulta de chave transacional na inicialização do plugin, caso a chave não exista no terminal, este deverá ser enviado para o fabricante(Pax), para correção. A ausência da chave impede a transação e não há correção do lado da Zoop.&#xA;Faz-se uso da classe SmartPOSPaymentRequestBuilder. Input de senha No input de senha, a PAX configura o teclado como embaralhado por padrão. Para ter o teclado exibido corretamente, é necessário adicionar ao arquivo config.xml (ou criar, caso não exista), dentro de res/values/, alguns parâmetros, conforme abaixo: &lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt; &lt;resources&gt; &lt;bool name=&#34;keyboard_random&#34;&gt;false&lt;/bool&gt; &lt;bool name=&#34;show_input_box&#34;&gt;false&lt;/bool&gt; &lt;/resources&gt; Exemplo de Pagamento val paymentRequest = SmartPOSPlugin.createPaymentRequestBuilder() .amount(1000) .option(Option.CREDIT) .installments(2) //.autoPrintEstablishmentReceipt(false) Para desabilitar a impressão automática. //.referenceId(&#34;&#34;) Identificador próprio (opcional) //.metadata(buildJsonObject {}) Metadados adicionais (opcional) .callback(object: Callback&lt;SmartPOSPaymentResponse&gt;() { override fun onStart() { startLoadingAnimation() } override fun onSuccess(response: SmartPOSPaymentResponse) { handleSucessfullPayment(response) } override fun onFail(exception: Throwable) { handlePaymentFailure(exception) } override fun onComplete() { stopLoadingAnimation() } }) .messageCallback(object: Callback&lt;MessageCallbackRequestField.MessageData&gt;() { override fun onSuccess(messageData: MessageCallbackRequestField.MessageData) { displayUserMessage(messageData.message) } override fun onFail(exception: Throwable) { } }) .pinCallback(object: Callback&lt;PinCallbackRequestField.PinData&gt;() { override fun onSuccess(pinData: PinCallbackRequestField.PinData) { val eventType = pinData.getType(); when (eventType) { Terminal.PinEventHandler.EventType.Start -&gt; creatViewToDisplayPasswordInput() Terminal.PinEventHandler.EventType.Finish -&gt; finishPasswordInput() Terminal.PinEventHandler.EventType.Inserted -&gt; handlePasswordCaracterInput() Terminal.PinEventHandler.EventType.Removed -&gt; handlePasswordCaracterRemoved() else -&gt; handlePasswordCaracterCleared() } } override fun onFail(exception: Throwable) { } }) .menuSelectionCallback(object: Callback&lt;SmartPOSMenuOptions&gt;() { override fun onFail(error: Throwable) { } override fun onSuccess(response: SmartPOSMenuOptions) { assembleOptionsList(response.options.iterable) } override fun onFail(error: Throwable) { } }) .userInputCallback(object : Callback&lt;UserInput&gt;() { override fun onSuccess(response: UserInput) { when (response.type) { UserInputType.CVV -&gt; { requestCvv() } } } override fun onFail(error: Throwable) { } }) .build() Zoop.post(paymentRequest) Parâmetros de entrada Chave Tipo Objetivo Exemplo amount Long Valor da transação (em centavos). 2 (R$ 0,02) option Option Opção do pagamento (do tipo Option). Option.CREDIT installments Long Quantidade de parcelas. 2 autoPrintEstablishmentReceipt Boolean Imprimir ou não a via do estabelecimento automaticamente. true referenceId String Identificador próprio gerado pelo parceiro (opcional, máx. 50 caracteres) &#34;237ab31-g99c-4e25-9hjs-32u4d3gf7fh2&#34; metadata String (em JSON) ou JsonObject Metadados personalizados fornecidos pelo parceiro (opcional, máx. 512 caracteres). &#34;{\&#34;parcelado\&#34;:false,\&#34;tentativa\&#34;:1,\&#34;vencimento\&#34;:\&#34;2024-02-15\&#34;,\&#34;versao\&#34;:\&#34;1.23.4\&#34;}&#34; Opções de pagamento Option { CREDIT, // Crédito à vista CREDIT_WITH_INSTALLMENTS, // Crédito parcelado DEBIT // Débito } Metadados em JsonObject Para criar um objeto de JsonObject, faça como no seguinte exemplo:</description>
    <generator>Hugo</generator>
    <language>pt</language>
    <atom:link href="//localhost:1313/functions/card_payment/index.xml" rel="self" type="application/rss+xml" />
  </channel>
</rss>